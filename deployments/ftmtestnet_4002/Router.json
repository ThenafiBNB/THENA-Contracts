{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.13\"},\"sources\":{\"contracts/Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport './libraries/Math.sol';\\nimport './interfaces/IERC20.sol';\\nimport './interfaces/IPair.sol';\\nimport './interfaces/IPairFactory.sol';\\nimport './interfaces/IRouter.sol';\\nimport './interfaces/IWETH.sol';\\n\\ncontract Router is IRouter {\\n\\n    struct route {\\n        address from;\\n        address to;\\n        bool stable;\\n    }\\n\\n    address public immutable factory;\\n    IWETH public immutable weth;\\n    uint internal constant MINIMUM_LIQUIDITY = 10**3;\\n    bytes32 immutable pairCodeHash;\\n\\n    // create swap event with sender and amountIn for the referral event reader system\\n    event Swap(address indexed sender,uint amount0In,address _tokenIn, address indexed to);  \\n\\n    modifier ensure(uint deadline) {\\n        require(deadline >= block.timestamp, 'Router: EXPIRED');\\n        _;\\n    }\\n    constructor(address _factory, address _weth) {\\n        factory = _factory;\\n        pairCodeHash = IPairFactory(_factory).pairCodeHash();\\n        weth = IWETH(_weth);\\n    }\\n\\n\\n    receive() external payable {\\n        assert(msg.sender == address(weth)); // only accept ETH via fallback from the WETH contract\\n    }\\n\\n    function sortTokens(address tokenA, address tokenB) public pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, 'Router: IDENTICAL_ADDRESSES');\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'Router: ZERO_ADDRESS');\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(address tokenA, address tokenB, bool stable) public view returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(uint160(uint256(keccak256(abi.encodePacked(\\n            hex'ff',\\n            factory,\\n            keccak256(abi.encodePacked(token0, token1, stable)),\\n            pairCodeHash // init code hash\\n        )))));\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quoteLiquidity(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\\n        require(amountA > 0, 'Router: INSUFFICIENT_AMOUNT');\\n        require(reserveA > 0 && reserveB > 0, 'Router: INSUFFICIENT_LIQUIDITY');\\n        amountB = amountA * reserveB / reserveA;\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(address tokenA, address tokenB, bool stable) public view returns (uint reserveA, uint reserveB) {\\n        (address token0,) = sortTokens(tokenA, tokenB);\\n        (uint reserve0, uint reserve1,) = IPair(pairFor(tokenA, tokenB, stable)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountOut(uint amountIn, address tokenIn, address tokenOut) external view returns (uint amount, bool stable) {\\n        address pair = pairFor(tokenIn, tokenOut, true);\\n        uint amountStable;\\n        uint amountVolatile;\\n        if (IPairFactory(factory).isPair(pair)) {\\n            amountStable = IPair(pair).getAmountOut(amountIn, tokenIn);\\n        }\\n        pair = pairFor(tokenIn, tokenOut, false);\\n        if (IPairFactory(factory).isPair(pair)) {\\n            amountVolatile = IPair(pair).getAmountOut(amountIn, tokenIn);\\n        }\\n        return amountStable > amountVolatile ? (amountStable, true) : (amountVolatile, false);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(uint amountIn, route[] memory routes) public view returns (uint[] memory amounts) {\\n        require(routes.length >= 1, 'Router: INVALID_PATH');\\n        amounts = new uint[](routes.length+1);\\n        amounts[0] = amountIn;\\n        for (uint i = 0; i < routes.length; i++) {\\n            address pair = pairFor(routes[i].from, routes[i].to, routes[i].stable);\\n            if (IPairFactory(factory).isPair(pair)) {\\n                amounts[i+1] = IPair(pair).getAmountOut(amounts[i], routes[i].from);\\n            }\\n        }\\n    }\\n\\n    function isPair(address pair) external view returns (bool) {\\n        return IPairFactory(factory).isPair(pair);\\n    }\\n\\n    function quoteAddLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint amountADesired,\\n        uint amountBDesired\\n    ) external view returns (uint amountA, uint amountB, uint liquidity) {\\n        // create the pair if it doesn't exist yet\\n        address _pair = IPairFactory(factory).getPair(tokenA, tokenB, stable);\\n        (uint reserveA, uint reserveB) = (0,0);\\n        uint _totalSupply = 0;\\n        if (_pair != address(0)) {\\n            _totalSupply = IERC20(_pair).totalSupply();\\n            (reserveA, reserveB) = getReserves(tokenA, tokenB, stable);\\n        }\\n        if (reserveA == 0 && reserveB == 0) {\\n            (amountA, amountB) = (amountADesired, amountBDesired);\\n            liquidity = Math.sqrt(amountA * amountB) - MINIMUM_LIQUIDITY;\\n        } else {\\n\\n            uint amountBOptimal = quoteLiquidity(amountADesired, reserveA, reserveB);\\n            if (amountBOptimal <= amountBDesired) {\\n                (amountA, amountB) = (amountADesired, amountBOptimal);\\n                liquidity = Math.min(amountA * _totalSupply / reserveA, amountB * _totalSupply / reserveB);\\n            } else {\\n                uint amountAOptimal = quoteLiquidity(amountBDesired, reserveB, reserveA);\\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\\n                liquidity = Math.min(amountA * _totalSupply / reserveA, amountB * _totalSupply / reserveB);\\n            }\\n        }\\n    }\\n\\n    function quoteRemoveLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint liquidity\\n    ) external view returns (uint amountA, uint amountB) {\\n        // create the pair if it doesn't exist yet\\n        address _pair = IPairFactory(factory).getPair(tokenA, tokenB, stable);\\n\\n        if (_pair == address(0)) {\\n            return (0,0);\\n        }\\n\\n        (uint reserveA, uint reserveB) = getReserves(tokenA, tokenB, stable);\\n        uint _totalSupply = IERC20(_pair).totalSupply();\\n\\n        amountA = liquidity * reserveA / _totalSupply; // using balances ensures pro-rata distribution\\n        amountB = liquidity * reserveB / _totalSupply; // using balances ensures pro-rata distribution\\n\\n    }\\n\\n    function _addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin\\n    ) internal returns (uint amountA, uint amountB) {\\n        require(amountADesired >= amountAMin);\\n        require(amountBDesired >= amountBMin);\\n        // create the pair if it doesn't exist yet\\n        address _pair = IPairFactory(factory).getPair(tokenA, tokenB, stable);\\n        if (_pair == address(0)) {\\n            _pair = IPairFactory(factory).createPair(tokenA, tokenB, stable);\\n        }\\n        (uint reserveA, uint reserveB) = getReserves(tokenA, tokenB, stable);\\n        if (reserveA == 0 && reserveB == 0) {\\n            (amountA, amountB) = (amountADesired, amountBDesired);\\n        } else {\\n            uint amountBOptimal = quoteLiquidity(amountADesired, reserveA, reserveB);\\n            if (amountBOptimal <= amountBDesired) {\\n                require(amountBOptimal >= amountBMin, 'Router: INSUFFICIENT_B_AMOUNT');\\n                (amountA, amountB) = (amountADesired, amountBOptimal);\\n            } else {\\n                uint amountAOptimal = quoteLiquidity(amountBDesired, reserveB, reserveA);\\n                assert(amountAOptimal <= amountADesired);\\n                require(amountAOptimal >= amountAMin, 'Router: INSUFFICIENT_A_AMOUNT');\\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\\n            }\\n        }\\n    }\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external ensure(deadline) returns (uint amountA, uint amountB, uint liquidity) {\\n        (amountA, amountB) = _addLiquidity(tokenA, tokenB, stable, amountADesired, amountBDesired, amountAMin, amountBMin);\\n        address pair = pairFor(tokenA, tokenB, stable);\\n        _safeTransferFrom(tokenA, msg.sender, pair, amountA);\\n        _safeTransferFrom(tokenB, msg.sender, pair, amountB);\\n        liquidity = IPair(pair).mint(to);\\n    }\\n\\n    function addLiquidityETH(\\n        address token,\\n        bool stable,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable ensure(deadline) returns (uint amountToken, uint amountETH, uint liquidity) {\\n        (amountToken, amountETH) = _addLiquidity(\\n            token,\\n            address(weth),\\n            stable,\\n            amountTokenDesired,\\n            msg.value,\\n            amountTokenMin,\\n            amountETHMin\\n        );\\n        address pair = pairFor(token, address(weth), stable);\\n        _safeTransferFrom(token, msg.sender, pair, amountToken);\\n        weth.deposit{value: amountETH}();\\n        assert(weth.transfer(pair, amountETH));\\n        liquidity = IPair(pair).mint(to);\\n        // refund dust eth, if any\\n        if (msg.value > amountETH) _safeTransferETH(msg.sender, msg.value - amountETH);\\n    }\\n\\n    // **** REMOVE LIQUIDITY ****\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) public ensure(deadline) returns (uint amountA, uint amountB) {\\n        address pair = pairFor(tokenA, tokenB, stable);\\n        require(IPair(pair).transferFrom(msg.sender, pair, liquidity)); // send liquidity to pair\\n        (uint amount0, uint amount1) = IPair(pair).burn(to);\\n        (address token0,) = sortTokens(tokenA, tokenB);\\n        (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\\n        require(amountA >= amountAMin, 'Router: INSUFFICIENT_A_AMOUNT');\\n        require(amountB >= amountBMin, 'Router: INSUFFICIENT_B_AMOUNT');\\n    }\\n\\n    function removeLiquidityETH(\\n        address token,\\n        bool stable,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) public ensure(deadline) returns (uint amountToken, uint amountETH) {\\n        (amountToken, amountETH) = removeLiquidity(\\n            token,\\n            address(weth),\\n            stable,\\n            liquidity,\\n            amountTokenMin,\\n            amountETHMin,\\n            address(this),\\n            deadline\\n        );\\n        _safeTransfer(token, to, amountToken);\\n        weth.withdraw(amountETH);\\n        _safeTransferETH(to, amountETH);\\n    }\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB) {\\n        address pair = pairFor(tokenA, tokenB, stable);\\n        {\\n            uint value = approveMax ? type(uint).max : liquidity;\\n            IPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\\n        }\\n\\n        (amountA, amountB) = removeLiquidity(tokenA, tokenB, stable, liquidity, amountAMin, amountBMin, to, deadline);\\n    }\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        bool stable,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH) {\\n        address pair = pairFor(token, address(weth), stable);\\n        uint value = approveMax ? type(uint).max : liquidity;\\n        IPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\\n        (amountToken, amountETH) = removeLiquidityETH(token, stable, liquidity, amountTokenMin, amountETHMin, to, deadline);\\n    }\\n\\n    // **** SWAP ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swap(uint[] memory amounts, route[] memory routes, address _to) internal virtual {\\n        for (uint i = 0; i < routes.length; i++) {\\n            (address token0,) = sortTokens(routes[i].from, routes[i].to);\\n            uint amountOut = amounts[i + 1];\\n            (uint amount0Out, uint amount1Out) = routes[i].from == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\\n            address to = i < routes.length - 1 ? pairFor(routes[i+1].from, routes[i+1].to, routes[i+1].stable) : _to;\\n            IPair(pairFor(routes[i].from, routes[i].to, routes[i].stable)).swap(\\n                amount0Out, amount1Out, to, new bytes(0)\\n            );\\n        }\\n        emit Swap(msg.sender, amounts[0], routes[0].from, _to);\\n    }\\n\\n    function swapExactTokensForTokensSimple(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address tokenFrom,\\n        address tokenTo,\\n        bool stable,\\n        address to,\\n        uint deadline\\n    ) external ensure(deadline) returns (uint[] memory amounts) {\\n        route[] memory routes = new route[](1);\\n        routes[0].from = tokenFrom;\\n        routes[0].to = tokenTo;\\n        routes[0].stable = stable;\\n        amounts = getAmountsOut(amountIn, routes);\\n        require(amounts[amounts.length - 1] >= amountOutMin, 'Router: INSUFFICIENT_OUTPUT_AMOUNT');\\n        _safeTransferFrom(\\n            routes[0].from, msg.sender, pairFor(routes[0].from, routes[0].to, routes[0].stable), amounts[0]\\n        );\\n        _swap(amounts, routes, to);\\n    }\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        route[] calldata routes,\\n        address to,\\n        uint deadline\\n    ) external ensure(deadline) returns (uint[] memory amounts) {\\n        amounts = getAmountsOut(amountIn, routes);\\n        require(amounts[amounts.length - 1] >= amountOutMin, 'Router: INSUFFICIENT_OUTPUT_AMOUNT');\\n        _safeTransferFrom(\\n            routes[0].from, msg.sender, pairFor(routes[0].from, routes[0].to, routes[0].stable), amounts[0]\\n        );\\n        _swap(amounts, routes, to);\\n    }\\n\\n    function swapExactETHForTokens(uint amountOutMin, route[] calldata routes, address to, uint deadline) external payable ensure(deadline) returns (uint[] memory amounts)\\n    {\\n        require(routes[0].from == address(weth), 'Router: INVALID_PATH');\\n        amounts = getAmountsOut(msg.value, routes);\\n        require(amounts[amounts.length - 1] >= amountOutMin, 'Router: INSUFFICIENT_OUTPUT_AMOUNT');\\n        weth.deposit{value: amounts[0]}();\\n        assert(weth.transfer(pairFor(routes[0].from, routes[0].to, routes[0].stable), amounts[0]));\\n        _swap(amounts, routes, to);\\n    }\\n\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, route[] calldata routes, address to, uint deadline)\\n    external\\n    ensure(deadline)\\n    returns (uint[] memory amounts)\\n    {\\n        require(routes[routes.length - 1].to == address(weth), 'Router: INVALID_PATH');\\n        amounts = getAmountsOut(amountIn, routes);\\n        require(amounts[amounts.length - 1] >= amountOutMin, 'Router: INSUFFICIENT_OUTPUT_AMOUNT');\\n        _safeTransferFrom(\\n            routes[0].from, msg.sender, pairFor(routes[0].from, routes[0].to, routes[0].stable), amounts[0]\\n        );\\n        _swap(amounts, routes, address(this));\\n        weth.withdraw(amounts[amounts.length - 1]);\\n        _safeTransferETH(to, amounts[amounts.length - 1]);\\n    }\\n\\n    function _safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n\\n    function _safeTransfer(address token, address to, uint256 value) internal {\\n        require(token.code.length > 0);\\n        (bool success, bytes memory data) =\\n        token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\\n    }\\n\\n    function _safeTransferFrom(address token, address from, address to, uint256 value) internal {\\n        require(token.code.length > 0);\\n        (bool success, bytes memory data) =\\n        token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\\n    }\\n}\\n\",\"versionPragma\":\"0.8.13\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nlibrary Math {\\n    function max(uint a, uint b) internal pure returns (uint) {\\n        return a >= b ? a : b;\\n    }\\n    function min(uint a, uint b) internal pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n    function cbrt(uint256 n) internal pure returns (uint256) { unchecked {\\n        uint256 x = 0;\\n        for (uint256 y = 1 << 255; y > 0; y >>= 3) {\\n            x <<= 1;\\n            uint256 z = 3 * x * (x + 1) + 1;\\n            if (n / y >= z) {\\n                n -= y * z;\\n                x += 1;\\n            }\\n        }\\n        return x;\\n    }}\\n}\\n\",\"versionPragma\":\"0.8.13\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function transfer(address recipient, uint amount) external returns (bool);\\n    function decimals() external view returns (uint8);\\n    function symbol() external view returns (string memory);\\n    function balanceOf(address) external view returns (uint);\\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function approve(address spender, uint value) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint value);\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\",\"versionPragma\":\"0.8.13\"},\"contracts/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IPair {\\n    function metadata() external view returns (uint dec0, uint dec1, uint r0, uint r1, bool st, address t0, address t1);\\n    function claimFees() external returns (uint, uint);\\n    function tokens() external view returns (address, address);\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function mint(address to) external returns (uint liquidity);\\n    function getReserves() external view returns (uint _reserve0, uint _reserve1, uint _blockTimestampLast);\\n    function getAmountOut(uint, address) external view returns (uint);\\n\\n    function name() external view returns(string memory);\\n    function symbol() external view returns(string memory);\\n    function totalSupply() external view returns (uint);\\n    function decimals() external view returns (uint8);\\n\\n    function claimable0(address _user) external view returns (uint);\\n    function claimable1(address _user) external view returns (uint);\\n\\n    function isStable() external view returns(bool);\\n\\n\\n    /*function token0() external view returns(address);\\n    function reserve0() external view returns(address);\\n    function decimals0() external view returns(address);\\n    function token1() external view returns(address);\\n    function reserve1() external view returns(address);\\n    function decimals1() external view returns(address);*/\\n\\n\\n}\\n\",\"versionPragma\":\"0.8.13\"},\"contracts/interfaces/IPairFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IPairFactory {\\n    function allPairsLength() external view returns (uint);\\n    function isPair(address pair) external view returns (bool);\\n    function allPairs(uint index) external view returns (address);\\n    function pairCodeHash() external pure returns (bytes32);\\n    function getPair(address tokenA, address token, bool stable) external view returns (address);\\n    function createPair(address tokenA, address tokenB, bool stable) external returns (address pair);\\n}\\n\",\"versionPragma\":\"0.8.13\"},\"contracts/interfaces/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IRouter {\\n    function pairFor(address tokenA, address tokenB, bool stable) external view returns (address pair);\\n}\\n\",\"versionPragma\":\"0.8.13\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint256 value) external returns (bool);\\n    function withdraw(uint256) external;\\n}\\n\",\"versionPragma\":\"0.8.13\"}}}","address":"0x6670b108a06405ff9d3ab385aBfE44178F727155","bytecode":"0x60e06040523480156200001157600080fd5b5060405162003871380380620038718339810160408190526200003491620000d8565b6001600160a01b038216608081905260408051631355724960e31b81529051639aab9248916004808201926020929091908290030181865afa1580156200007f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000a5919062000110565b60c0526001600160a01b031660a052506200012a565b80516001600160a01b0381168114620000d357600080fd5b919050565b60008060408385031215620000ec57600080fd5b620000f783620000bb565b91506200010760208401620000bb565b90509250929050565b6000602082840312156200012357600080fd5b5051919050565b60805160a05160c05161367d620001f46000396000610ece01526000818161013301528181610200015281816108ee01528181610b2d01528181610d7e0152818161144501528181611558015281816115e601528181611ce801528181611d1e01528181611d5301528181611de801528181611f270152611f7701526000818161040201528181610c1301528181610e930152818161114c015281816112600152818161189501528181611a0901528181612014015281816126950152612736015261367d6000f3fe6080604052600436106101235760003560e01c80635e60dab5116100a0578063b7e0d4c011610064578063b7e0d4c0146103dd578063c45a0155146103f0578063d7b0e0a514610424578063e5e31b1314610444578063f41766d81461047457600080fd5b80635e60dab51461034a57806367ffb66a1461036a5780639881fcb41461037d57806398a0fb3c1461039d578063a32b1fcd146103bd57600080fd5b8063448725b4116100e7578063448725b41461025a5780634c1ee03e1461027a578063544caa561461029a5780635a47ddc3146102da5780635e1e63251461031557600080fd5b80630dede6c41461016757806313dcfc59146101a157806318a13086146101ce5780633fc8cef3146101ee5780634386e63c1461023a57600080fd5b3661016257336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461016057610160612b1d565b005b600080fd5b34801561017357600080fd5b50610187610182366004612b59565b610494565b604080519283526020830191909152015b60405180910390f35b3480156101ad57600080fd5b506101c16101bc366004612bde565b6106ae565b6040516101989190612c59565b3480156101da57600080fd5b506101c16101e9366004612ce2565b6108c1565b3480156101fa57600080fd5b506102227f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610198565b34801561024657600080fd5b50610187610255366004612d55565b610c0c565b34801561026657600080fd5b50610187610275366004612db7565b610d73565b34801561028657600080fd5b50610222610295366004612e61565b610e4c565b3480156102a657600080fd5b506102ba6102b5366004612eac565b610f54565b604080516001600160a01b03938416815292909116602083015201610198565b3480156102e657600080fd5b506102fa6102f5366004612ee5565b611034565b60408051938452602084019290925290820152606001610198565b34801561032157600080fd5b50610335610330366004612f74565b611114565b60408051928352901515602083015201610198565b34801561035657600080fd5b50610187610365366004612e61565b611368565b6101c1610378366004612fab565b611420565b34801561038957600080fd5b506101c16103983660046130cf565b61177f565b3480156103a957600080fd5b506102fa6103b836600461318b565b611a01565b3480156103c957600080fd5b506101876103d83660046131e6565b611c01565b6102fa6103eb3660046132a2565b611cbc565b3480156103fc57600080fd5b506102227f000000000000000000000000000000000000000000000000000000000000000081565b34801561043057600080fd5b5061018761043f3660046132a2565b611efd565b34801561045057600080fd5b5061046461045f3660046132fd565b611ff2565b6040519015158152602001610198565b34801561048057600080fd5b506101c161048f366004612ce2565b612087565b60008082428110156104c15760405162461bcd60e51b81526004016104b89061331a565b60405180910390fd5b60006104ce8c8c8c610e4c565b6040516323b872dd60e01b81523360048201526001600160a01b03821660248201819052604482018c90529192506323b872dd906064016020604051808303816000875af1158015610524573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105489190613343565b61055157600080fd5b60405163226bf2d160e21b81526001600160a01b03878116600483015260009182918416906389afcb449060240160408051808303816000875af115801561059d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c19190613360565b9150915060006105d18f8f610f54565b509050806001600160a01b03168f6001600160a01b0316146105f45781836105f7565b82825b90975095508a87101561064c5760405162461bcd60e51b815260206004820152601d60248201527f526f757465723a20494e53554646494349454e545f415f414d4f554e5400000060448201526064016104b8565b8986101561069c5760405162461bcd60e51b815260206004820152601d60248201527f526f757465723a20494e53554646494349454e545f425f414d4f554e5400000060448201526064016104b8565b50505050509850989650505050505050565b606081428110156106d15760405162461bcd60e51b81526004016104b89061331a565b604080516001808252818301909252600091816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816106e8579050509050878160008151811061072b5761072b613384565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050868160008151811061076357610763613384565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050858160008151811061079b5761079b613384565b60209081029190910101519015156040909101526107b98a8261177f565b92508883600185516107cb91906133b0565b815181106107db576107db613384565b602002602001015110156108015760405162461bcd60e51b81526004016104b8906133c7565b6108a98160008151811061081757610817613384565b602002602001015160000151336108898460008151811061083a5761083a613384565b6020026020010151600001518560008151811061085957610859613384565b6020026020010151602001518660008151811061087857610878613384565b602002602001015160400151610e4c565b8660008151811061089c5761089c613384565b60200260200101516121ac565b6108b48382876122a4565b5050979650505050505050565b606081428110156108e45760405162461bcd60e51b81526004016104b89061331a565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016868661091b6001826133b0565b81811061092a5761092a613384565b905060600201602001602081019061094291906132fd565b6001600160a01b0316146109685760405162461bcd60e51b81526004016104b890613409565b6109c4888787808060200260200160405190810160405280939291908181526020016000905b828210156109ba576109ab60608302860136819003810190613437565b8152602001906001019061098e565b505050505061177f565b91508682600184516109d691906133b0565b815181106109e6576109e6613384565b60200260200101511015610a0c5760405162461bcd60e51b81526004016104b8906133c7565b610ace86866000818110610a2257610a22613384565b610a3892602060609092020190810191506132fd565b33610abb89896000818110610a4f57610a4f613384565b610a6592602060609092020190810191506132fd565b8a8a6000818110610a7857610a78613384565b9050606002016020016020810190610a9091906132fd565b8b8b6000818110610aa357610aa3613384565b90506060020160400160208101906102959190613453565b8560008151811061089c5761089c613384565b610b2b828787808060200260200160405190810160405280939291908181526020016000905b82821015610b2057610b1160608302860136819003810190613437565b81526020019060010190610af4565b5050505050306122a4565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d8360018551610b6991906133b0565b81518110610b7957610b79613384565b60200260200101516040518263ffffffff1660e01b8152600401610b9f91815260200190565b600060405180830381600087803b158015610bb957600080fd5b505af1158015610bcd573d6000803e3d6000fd5b50505050610c01848360018551610be491906133b0565b81518110610bf457610bf4613384565b6020026020010151612590565b509695505050505050565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636801cc308888886040518463ffffffff1660e01b8152600401610c6193929190613470565b602060405180830381865afa158015610c7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca29190613494565b90506001600160a01b038116610cbf576000809250925050610d6a565b600080610ccd898989611368565b915091506000836001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3591906134b1565b905080610d4284896134ca565b610d4c91906134e9565b955080610d5983896134ca565b610d6391906134e9565b9450505050505b94509492505050565b6000806000610da38e7f00000000000000000000000000000000000000000000000000000000000000008f610e4c565b9050600087610db2578c610db6565b6000195b60405163d505accf60e01b81529091506001600160a01b0383169063d505accf90610df1903390309086908f908e908e908e9060040161350b565b600060405180830381600087803b158015610e0b57600080fd5b505af1158015610e1f573d6000803e3d6000fd5b50505050610e328f8f8f8f8f8f8f611efd565b809450819550505050509b509b9950505050505050505050565b6000806000610e5b8686610f54565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b16603482015286151560f81b604882015291935091507f000000000000000000000000000000000000000000000000000000000000000090604901604051602081830303815290604052805190602001207f0000000000000000000000000000000000000000000000000000000000000000604051602001610f32939291906001600160f81b0319815260609390931b6bffffffffffffffffffffffff191660018401526015830191909152603582015260550190565b60408051601f1981840301815291905280516020909101209695505050505050565b600080826001600160a01b0316846001600160a01b031603610fb85760405162461bcd60e51b815260206004820152601b60248201527f526f757465723a204944454e544943414c5f414444524553534553000000000060448201526064016104b8565b826001600160a01b0316846001600160a01b031610610fd8578284610fdb565b83835b90925090506001600160a01b03821661102d5760405162461bcd60e51b8152602060048201526014602482015273526f757465723a205a45524f5f4144445245535360601b60448201526064016104b8565b9250929050565b6000806000834281101561105a5760405162461bcd60e51b81526004016104b89061331a565b6110698d8d8d8d8d8d8d61265e565b9094509250600061107b8e8e8e610e4c565b90506110898e3383886121ac565b6110958d3383876121ac565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a627842906024016020604051808303816000875af11580156110dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110191906134b1565b9250505099509950999650505050505050565b600080600061112585856001610e4c565b60405163e5e31b1360e01b81526001600160a01b03828116600483015291925060009182917f00000000000000000000000000000000000000000000000000000000000000009091169063e5e31b1390602401602060405180830381865afa158015611195573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b99190613343565b15611232576040516378a051ad60e11b8152600481018990526001600160a01b03888116602483015284169063f140a35a90604401602060405180830381865afa15801561120b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122f91906134b1565b91505b61123e87876000610e4c565b60405163e5e31b1360e01b81526001600160a01b0380831660048301529194507f00000000000000000000000000000000000000000000000000000000000000009091169063e5e31b1390602401602060405180830381865afa1580156112a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cd9190613343565b15611346576040516378a051ad60e11b8152600481018990526001600160a01b03888116602483015284169063f140a35a90604401602060405180830381865afa15801561131f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134391906134b1565b90505b80821161135557806000611359565b8160015b94509450505050935093915050565b60008060006113778686610f54565b509050600080611388888888610e4c565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156113c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e9919061354c565b5091509150826001600160a01b0316886001600160a01b03161461140e578082611411565b81815b90999098509650505050505050565b606081428110156114435760405162461bcd60e51b81526004016104b89061331a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168686600081811061148057611480613384565b61149692602060609092020190810191506132fd565b6001600160a01b0316146114bc5760405162461bcd60e51b81526004016104b890613409565b61150e348787808060200260200160405190810160405280939291908181526020016000905b828210156109ba576114ff60608302860136819003810190613437565b815260200190600101906114e2565b915086826001845161152091906133b0565b8151811061153057611530613384565b602002602001015110156115565760405162461bcd60e51b81526004016104b8906133c7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db08360008151811061159857611598613384565b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b1580156115cb57600080fd5b505af11580156115df573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb61167d8888600081811061162957611629613384565b61163f92602060609092020190810191506132fd565b8989600081811061165257611652613384565b905060600201602001602081019061166a91906132fd565b8a8a6000818110610aa357610aa3613384565b8460008151811061169057611690613384565b60200260200101516040518363ffffffff1660e01b81526004016116c99291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af11580156116e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170c9190613343565b61171857611718612b1d565b611775828787808060200260200160405190810160405280939291908181526020016000905b8282101561176a5761175b60608302860136819003810190613437565b8152602001906001019061173e565b5050505050866122a4565b5095945050505050565b60606001825110156117a35760405162461bcd60e51b81526004016104b890613409565b81516117b090600161357a565b67ffffffffffffffff8111156117c8576117c8613012565b6040519080825280602002602001820160405280156117f1578160200160208202803683370190505b509050828160008151811061180857611808613384565b60200260200101818152505060005b82518110156119fa57600061187384838151811061183757611837613384565b60200260200101516000015185848151811061185557611855613384565b60200260200101516020015186858151811061087857610878613384565b60405163e5e31b1360e01b81526001600160a01b0380831660048301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063e5e31b1390602401602060405180830381865afa1580156118de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119029190613343565b156119e757806001600160a01b031663f140a35a84848151811061192857611928613384565b602002602001015186858151811061194257611942613384565b6020026020010151600001516040518363ffffffff1660e01b815260040161197d9291909182526001600160a01b0316602082015260400190565b602060405180830381865afa15801561199a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119be91906134b1565b836119ca84600161357a565b815181106119da576119da613384565b6020026020010181815250505b50806119f281613592565b915050611817565b5092915050565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636801cc308a8a8a6040518463ffffffff1660e01b8152600401611a5793929190613470565b602060405180830381865afa158015611a74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a989190613494565b9050600080806001600160a01b03841615611b2257836001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611aeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0f91906134b1565b9050611b1c8c8c8c611368565b90935091505b82158015611b2e575081155b15611b5f578896508795506103e8611b4e611b49888a6134ca565b6128dc565b611b5891906133b0565b9450611bf2565b6000611b6c8a858561294c565b9050888111611bb457899750955085611bad84611b89848b6134ca565b611b9391906134e9565b84611b9e858b6134ca565b611ba891906134e9565b612a16565b9550611bf0565b6000611bc18a858761294c565b9850899750889050611bec85611bd785846134ca565b611be191906134e9565b85611b9e868c6134ca565b9650505b505b50505050955095509592505050565b6000806000611c118f8f8f610e4c565b9050600087611c20578c611c24565b6000195b60405163d505accf60e01b81529091506001600160a01b0383169063d505accf90611c5f903390309086908f908e908e908e9060040161350b565b600060405180830381600087803b158015611c7957600080fd5b505af1158015611c8d573d6000803e3d6000fd5b5050505050611ca28f8f8f8f8f8f8f8f610494565b8093508194505050509c509c9a5050505050505050505050565b60008060008342811015611ce25760405162461bcd60e51b81526004016104b89061331a565b611d118b7f00000000000000000000000000000000000000000000000000000000000000008c8c348d8d61265e565b90945092506000611d438c7f00000000000000000000000000000000000000000000000000000000000000008d610e4c565b9050611d518c3383886121ac565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b158015611dac57600080fd5b505af1158015611dc0573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038581166004830152602482018990527f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb925060440190506020604051808303816000875af1158015611e35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e599190613343565b611e6557611e65612b1d565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a627842906024016020604051808303816000875af1158015611ead573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed191906134b1565b925083341115611eee57611eee33611ee986346133b0565b612590565b50509750975097945050505050565b6000808242811015611f215760405162461bcd60e51b81526004016104b89061331a565b611f518a7f00000000000000000000000000000000000000000000000000000000000000008b8b8b8b308b610494565b9093509150611f618a8685612a2e565b604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015611fc357600080fd5b505af1158015611fd7573d6000803e3d6000fd5b50505050611fe58583612590565b5097509795505050505050565b60405163e5e31b1360e01b81526001600160a01b0382811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e5e31b1390602401602060405180830381865afa15801561205d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120819190613343565b92915050565b606081428110156120aa5760405162461bcd60e51b81526004016104b89061331a565b6120fc888787808060200260200160405190810160405280939291908181526020016000905b828210156109ba576120ed60608302860136819003810190613437565b815260200190600101906120d0565b915086826001845161210e91906133b0565b8151811061211e5761211e613384565b602002602001015110156121445760405162461bcd60e51b81526004016104b8906133c7565b61215a86866000818110610a2257610a22613384565b610c01828787808060200260200160405190810160405280939291908181526020016000905b8282101561176a5761219d60608302860136819003810190613437565b81526020019060010190612180565b6000846001600160a01b03163b116121c357600080fd5b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161222791906135db565b6000604051808303816000865af19150503d8060008114612264576040519150601f19603f3d011682016040523d82523d6000602084013e612269565b606091505b50915091508180156122935750805115806122935750808060200190518101906122939190613343565b61229c57600080fd5b505050505050565b60005b82518110156124f35760006122f68483815181106122c7576122c7613384565b6020026020010151600001518584815181106122e5576122e5613384565b602002602001015160200151610f54565b50905060008561230784600161357a565b8151811061231757612317613384565b60200260200101519050600080836001600160a01b031687868151811061234057612340613384565b6020026020010151600001516001600160a01b03161461236257826000612366565b6000835b9150915060006001885161237a91906133b0565b861061238657866123f9565b6123f98861239588600161357a565b815181106123a5576123a5613384565b602002602001015160000151898860016123bf919061357a565b815181106123cf576123cf613384565b6020026020010151602001518a8960016123e9919061357a565b8151811061087857610878613384565b905061244c88878151811061241057612410613384565b60200260200101516000015189888151811061242e5761242e613384565b6020026020010151602001518a898151811061087857610878613384565b6001600160a01b031663022c0d9f84848460006040519080825280601f01601f191660200182016040528015612489576020820181803683370190505b506040518563ffffffff1660e01b81526004016124a994939291906135f7565b600060405180830381600087803b1580156124c357600080fd5b505af11580156124d7573d6000803e3d6000fd5b50505050505050505080806124eb90613592565b9150506122a7565b50806001600160a01b0316336001600160a01b03167fff3715fa8f2d4d791dd7a610a545050b8c6fe3a62b0f6c38f2f96a00598fe4838560008151811061253c5761253c613384565b60200260200101518560008151811061255757612557613384565b6020026020010151600001516040516125839291909182526001600160a01b0316602082015260400190565b60405180910390a3505050565b604080516000808252602082019092526001600160a01b0384169083906040516125ba91906135db565b60006040518083038185875af1925050503d80600081146125f7576040519150601f19603f3d011682016040523d82523d6000602084013e6125fc565b606091505b50509050806126595760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201526213115160ea1b60648201526084016104b8565b505050565b6000808386101561266e57600080fd5b8285101561267b57600080fd5b6040516306801cc360e41b81526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636801cc30906126ce908d908d908d90600401613470565b602060405180830381865afa1580156126eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061270f9190613494565b90506001600160a01b0381166127b5576040516320b7f73960e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906382dfdce49061276f908d908d908d90600401613470565b6020604051808303816000875af115801561278e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b29190613494565b90505b6000806127c38c8c8c611368565b915091508160001480156127d5575080155b156127e5578894508793506128cd565b60006127f28a848461294c565b9050888111612856578681101561284b5760405162461bcd60e51b815260206004820152601d60248201527f526f757465723a20494e53554646494349454e545f425f414d4f554e5400000060448201526064016104b8565b8995509350836128cb565b60006128638a848661294c565b90508a81111561287557612875612b1d565b888110156128c55760405162461bcd60e51b815260206004820152601d60248201527f526f757465723a20494e53554646494349454e545f415f414d4f554e5400000060448201526064016104b8565b95508894505b505b50505097509795505050505050565b6000600382111561293d57508060006128f66002836134e9565b61290190600161357a565b90505b818110156129375790508060028161291c81866134e9565b612926919061357a565b61293091906134e9565b9050612904565b50919050565b8115612947575060015b919050565b600080841161299d5760405162461bcd60e51b815260206004820152601b60248201527f526f757465723a20494e53554646494349454e545f414d4f554e54000000000060448201526064016104b8565b6000831180156129ad5750600082115b6129f95760405162461bcd60e51b815260206004820152601e60248201527f526f757465723a20494e53554646494349454e545f4c4951554944495459000060448201526064016104b8565b82612a0483866134ca565b612a0e91906134e9565b949350505050565b6000818310612a255781612a27565b825b9392505050565b6000836001600160a01b03163b11612a4557600080fd5b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691612aa191906135db565b6000604051808303816000865af19150503d8060008114612ade576040519150601f19603f3d011682016040523d82523d6000602084013e612ae3565b606091505b5091509150818015612b0d575080511580612b0d575080806020019051810190612b0d9190613343565b612b1657600080fd5b5050505050565b634e487b7160e01b600052600160045260246000fd5b6001600160a01b0381168114612b4857600080fd5b50565b8015158114612b4857600080fd5b600080600080600080600080610100898b031215612b7657600080fd5b8835612b8181612b33565b97506020890135612b9181612b33565b96506040890135612ba181612b4b565b9550606089013594506080890135935060a0890135925060c0890135612bc681612b33565b8092505060e089013590509295985092959890939650565b600080600080600080600060e0888a031215612bf957600080fd5b87359650602088013595506040880135612c1281612b33565b94506060880135612c2281612b33565b93506080880135612c3281612b4b565b925060a0880135612c4281612b33565b8092505060c0880135905092959891949750929550565b6020808252825182820181905260009190848201906040850190845b81811015612c9157835183529284019291840191600101612c75565b50909695505050505050565b60008083601f840112612caf57600080fd5b50813567ffffffffffffffff811115612cc757600080fd5b60208301915083602060608302850101111561102d57600080fd5b60008060008060008060a08789031215612cfb57600080fd5b8635955060208701359450604087013567ffffffffffffffff811115612d2057600080fd5b612d2c89828a01612c9d565b9095509350506060870135612d4081612b33565b80925050608087013590509295509295509295565b60008060008060808587031215612d6b57600080fd5b8435612d7681612b33565b93506020850135612d8681612b33565b92506040850135612d9681612b4b565b9396929550929360600135925050565b803560ff8116811461294757600080fd5b60008060008060008060008060008060006101608c8e031215612dd957600080fd5b8b35612de481612b33565b9a5060208c0135612df481612b4b565b995060408c0135985060608c0135975060808c0135965060a08c0135612e1981612b33565b955060c08c0135945060e08c0135612e3081612b4b565b9350612e3f6101008d01612da6565b92506101208c013591506101408c013590509295989b509295989b9093969950565b600080600060608486031215612e7657600080fd5b8335612e8181612b33565b92506020840135612e9181612b33565b91506040840135612ea181612b4b565b809150509250925092565b60008060408385031215612ebf57600080fd5b8235612eca81612b33565b91506020830135612eda81612b33565b809150509250929050565b60008060008060008060008060006101208a8c031215612f0457600080fd5b8935612f0f81612b33565b985060208a0135612f1f81612b33565b975060408a0135612f2f81612b4b565b965060608a0135955060808a0135945060a08a0135935060c08a0135925060e08a0135612f5b81612b33565b809250506101008a013590509295985092959850929598565b600080600060608486031215612f8957600080fd5b833592506020840135612f9b81612b33565b91506040840135612ea181612b33565b600080600080600060808688031215612fc357600080fd5b85359450602086013567ffffffffffffffff811115612fe157600080fd5b612fed88828901612c9d565b909550935050604086013561300181612b33565b949793965091946060013592915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561305157613051613012565b604052919050565b60006060828403121561306b57600080fd5b6040516060810181811067ffffffffffffffff8211171561308e5761308e613012565b604052905080823561309f81612b33565b815260208301356130af81612b33565b602082015260408301356130c281612b4b565b6040919091015292915050565b600080604083850312156130e257600080fd5b8235915060208084013567ffffffffffffffff8082111561310257600080fd5b818601915086601f83011261311657600080fd5b81358181111561312857613128613012565b613136848260051b01613028565b8181528481019250606091820284018501918983111561315557600080fd5b938501935b8285101561317b5761316c8a86613059565b8452938401939285019261315a565b5080955050505050509250929050565b600080600080600060a086880312156131a357600080fd5b85356131ae81612b33565b945060208601356131be81612b33565b935060408601356131ce81612b4b565b94979396509394606081013594506080013592915050565b6000806000806000806000806000806000806101808d8f03121561320957600080fd5b8c3561321481612b33565b9b5060208d013561322481612b33565b9a5060408d013561323481612b4b565b995060608d0135985060808d0135975060a08d0135965060c08d013561325981612b33565b955060e08d013594506101008d013561327181612b4b565b93506132806101208e01612da6565b92506101408d013591506101608d013590509295989b509295989b509295989b565b600080600080600080600060e0888a0312156132bd57600080fd5b87356132c881612b33565b965060208801356132d881612b4b565b955060408801359450606088013593506080880135925060a0880135612c4281612b33565b60006020828403121561330f57600080fd5b8135612a2781612b33565b6020808252600f908201526e149bdd5d195c8e8811561412549151608a1b604082015260600190565b60006020828403121561335557600080fd5b8151612a2781612b4b565b6000806040838503121561337357600080fd5b505080516020909101519092909150565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156133c2576133c261339a565b500390565b60208082526022908201527f526f757465723a20494e53554646494349454e545f4f55545055545f414d4f55604082015261139560f21b606082015260800190565b6020808252601490820152730a4deeae8cae47440929cac82989288bea082a8960631b604082015260600190565b60006060828403121561344957600080fd5b612a278383613059565b60006020828403121561346557600080fd5b8135612a2781612b4b565b6001600160a01b039384168152919092166020820152901515604082015260600190565b6000602082840312156134a657600080fd5b8151612a2781612b33565b6000602082840312156134c357600080fd5b5051919050565b60008160001904831182151516156134e4576134e461339a565b500290565b60008261350657634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b60008060006060848603121561356157600080fd5b8351925060208401519150604084015190509250925092565b6000821982111561358d5761358d61339a565b500190565b6000600182016135a4576135a461339a565b5060010190565b60005b838110156135c65781810151838201526020016135ae565b838111156135d5576000848401525b50505050565b600082516135ed8184602087016135ab565b9190910192915050565b84815283602082015260018060a01b038316604082015260806060820152600082518060808401526136308160a08501602087016135ab565b601f01601f19169190910160a0019594505050505056fea2646970667358221220d034f130e00a4585cd5bda91fe34ae14f0fade09a8546bc88fdccd969917ec5464736f6c634300080d0033","deployedBytecode":"0x6080604052600436106101235760003560e01c80635e60dab5116100a0578063b7e0d4c011610064578063b7e0d4c0146103dd578063c45a0155146103f0578063d7b0e0a514610424578063e5e31b1314610444578063f41766d81461047457600080fd5b80635e60dab51461034a57806367ffb66a1461036a5780639881fcb41461037d57806398a0fb3c1461039d578063a32b1fcd146103bd57600080fd5b8063448725b4116100e7578063448725b41461025a5780634c1ee03e1461027a578063544caa561461029a5780635a47ddc3146102da5780635e1e63251461031557600080fd5b80630dede6c41461016757806313dcfc59146101a157806318a13086146101ce5780633fc8cef3146101ee5780634386e63c1461023a57600080fd5b3661016257336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461016057610160612b1d565b005b600080fd5b34801561017357600080fd5b50610187610182366004612b59565b610494565b604080519283526020830191909152015b60405180910390f35b3480156101ad57600080fd5b506101c16101bc366004612bde565b6106ae565b6040516101989190612c59565b3480156101da57600080fd5b506101c16101e9366004612ce2565b6108c1565b3480156101fa57600080fd5b506102227f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610198565b34801561024657600080fd5b50610187610255366004612d55565b610c0c565b34801561026657600080fd5b50610187610275366004612db7565b610d73565b34801561028657600080fd5b50610222610295366004612e61565b610e4c565b3480156102a657600080fd5b506102ba6102b5366004612eac565b610f54565b604080516001600160a01b03938416815292909116602083015201610198565b3480156102e657600080fd5b506102fa6102f5366004612ee5565b611034565b60408051938452602084019290925290820152606001610198565b34801561032157600080fd5b50610335610330366004612f74565b611114565b60408051928352901515602083015201610198565b34801561035657600080fd5b50610187610365366004612e61565b611368565b6101c1610378366004612fab565b611420565b34801561038957600080fd5b506101c16103983660046130cf565b61177f565b3480156103a957600080fd5b506102fa6103b836600461318b565b611a01565b3480156103c957600080fd5b506101876103d83660046131e6565b611c01565b6102fa6103eb3660046132a2565b611cbc565b3480156103fc57600080fd5b506102227f000000000000000000000000000000000000000000000000000000000000000081565b34801561043057600080fd5b5061018761043f3660046132a2565b611efd565b34801561045057600080fd5b5061046461045f3660046132fd565b611ff2565b6040519015158152602001610198565b34801561048057600080fd5b506101c161048f366004612ce2565b612087565b60008082428110156104c15760405162461bcd60e51b81526004016104b89061331a565b60405180910390fd5b60006104ce8c8c8c610e4c565b6040516323b872dd60e01b81523360048201526001600160a01b03821660248201819052604482018c90529192506323b872dd906064016020604051808303816000875af1158015610524573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105489190613343565b61055157600080fd5b60405163226bf2d160e21b81526001600160a01b03878116600483015260009182918416906389afcb449060240160408051808303816000875af115801561059d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c19190613360565b9150915060006105d18f8f610f54565b509050806001600160a01b03168f6001600160a01b0316146105f45781836105f7565b82825b90975095508a87101561064c5760405162461bcd60e51b815260206004820152601d60248201527f526f757465723a20494e53554646494349454e545f415f414d4f554e5400000060448201526064016104b8565b8986101561069c5760405162461bcd60e51b815260206004820152601d60248201527f526f757465723a20494e53554646494349454e545f425f414d4f554e5400000060448201526064016104b8565b50505050509850989650505050505050565b606081428110156106d15760405162461bcd60e51b81526004016104b89061331a565b604080516001808252818301909252600091816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816106e8579050509050878160008151811061072b5761072b613384565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050868160008151811061076357610763613384565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050858160008151811061079b5761079b613384565b60209081029190910101519015156040909101526107b98a8261177f565b92508883600185516107cb91906133b0565b815181106107db576107db613384565b602002602001015110156108015760405162461bcd60e51b81526004016104b8906133c7565b6108a98160008151811061081757610817613384565b602002602001015160000151336108898460008151811061083a5761083a613384565b6020026020010151600001518560008151811061085957610859613384565b6020026020010151602001518660008151811061087857610878613384565b602002602001015160400151610e4c565b8660008151811061089c5761089c613384565b60200260200101516121ac565b6108b48382876122a4565b5050979650505050505050565b606081428110156108e45760405162461bcd60e51b81526004016104b89061331a565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016868661091b6001826133b0565b81811061092a5761092a613384565b905060600201602001602081019061094291906132fd565b6001600160a01b0316146109685760405162461bcd60e51b81526004016104b890613409565b6109c4888787808060200260200160405190810160405280939291908181526020016000905b828210156109ba576109ab60608302860136819003810190613437565b8152602001906001019061098e565b505050505061177f565b91508682600184516109d691906133b0565b815181106109e6576109e6613384565b60200260200101511015610a0c5760405162461bcd60e51b81526004016104b8906133c7565b610ace86866000818110610a2257610a22613384565b610a3892602060609092020190810191506132fd565b33610abb89896000818110610a4f57610a4f613384565b610a6592602060609092020190810191506132fd565b8a8a6000818110610a7857610a78613384565b9050606002016020016020810190610a9091906132fd565b8b8b6000818110610aa357610aa3613384565b90506060020160400160208101906102959190613453565b8560008151811061089c5761089c613384565b610b2b828787808060200260200160405190810160405280939291908181526020016000905b82821015610b2057610b1160608302860136819003810190613437565b81526020019060010190610af4565b5050505050306122a4565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d8360018551610b6991906133b0565b81518110610b7957610b79613384565b60200260200101516040518263ffffffff1660e01b8152600401610b9f91815260200190565b600060405180830381600087803b158015610bb957600080fd5b505af1158015610bcd573d6000803e3d6000fd5b50505050610c01848360018551610be491906133b0565b81518110610bf457610bf4613384565b6020026020010151612590565b509695505050505050565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636801cc308888886040518463ffffffff1660e01b8152600401610c6193929190613470565b602060405180830381865afa158015610c7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca29190613494565b90506001600160a01b038116610cbf576000809250925050610d6a565b600080610ccd898989611368565b915091506000836001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3591906134b1565b905080610d4284896134ca565b610d4c91906134e9565b955080610d5983896134ca565b610d6391906134e9565b9450505050505b94509492505050565b6000806000610da38e7f00000000000000000000000000000000000000000000000000000000000000008f610e4c565b9050600087610db2578c610db6565b6000195b60405163d505accf60e01b81529091506001600160a01b0383169063d505accf90610df1903390309086908f908e908e908e9060040161350b565b600060405180830381600087803b158015610e0b57600080fd5b505af1158015610e1f573d6000803e3d6000fd5b50505050610e328f8f8f8f8f8f8f611efd565b809450819550505050509b509b9950505050505050505050565b6000806000610e5b8686610f54565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b16603482015286151560f81b604882015291935091507f000000000000000000000000000000000000000000000000000000000000000090604901604051602081830303815290604052805190602001207f0000000000000000000000000000000000000000000000000000000000000000604051602001610f32939291906001600160f81b0319815260609390931b6bffffffffffffffffffffffff191660018401526015830191909152603582015260550190565b60408051601f1981840301815291905280516020909101209695505050505050565b600080826001600160a01b0316846001600160a01b031603610fb85760405162461bcd60e51b815260206004820152601b60248201527f526f757465723a204944454e544943414c5f414444524553534553000000000060448201526064016104b8565b826001600160a01b0316846001600160a01b031610610fd8578284610fdb565b83835b90925090506001600160a01b03821661102d5760405162461bcd60e51b8152602060048201526014602482015273526f757465723a205a45524f5f4144445245535360601b60448201526064016104b8565b9250929050565b6000806000834281101561105a5760405162461bcd60e51b81526004016104b89061331a565b6110698d8d8d8d8d8d8d61265e565b9094509250600061107b8e8e8e610e4c565b90506110898e3383886121ac565b6110958d3383876121ac565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a627842906024016020604051808303816000875af11580156110dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110191906134b1565b9250505099509950999650505050505050565b600080600061112585856001610e4c565b60405163e5e31b1360e01b81526001600160a01b03828116600483015291925060009182917f00000000000000000000000000000000000000000000000000000000000000009091169063e5e31b1390602401602060405180830381865afa158015611195573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b99190613343565b15611232576040516378a051ad60e11b8152600481018990526001600160a01b03888116602483015284169063f140a35a90604401602060405180830381865afa15801561120b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122f91906134b1565b91505b61123e87876000610e4c565b60405163e5e31b1360e01b81526001600160a01b0380831660048301529194507f00000000000000000000000000000000000000000000000000000000000000009091169063e5e31b1390602401602060405180830381865afa1580156112a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cd9190613343565b15611346576040516378a051ad60e11b8152600481018990526001600160a01b03888116602483015284169063f140a35a90604401602060405180830381865afa15801561131f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134391906134b1565b90505b80821161135557806000611359565b8160015b94509450505050935093915050565b60008060006113778686610f54565b509050600080611388888888610e4c565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156113c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e9919061354c565b5091509150826001600160a01b0316886001600160a01b03161461140e578082611411565b81815b90999098509650505050505050565b606081428110156114435760405162461bcd60e51b81526004016104b89061331a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168686600081811061148057611480613384565b61149692602060609092020190810191506132fd565b6001600160a01b0316146114bc5760405162461bcd60e51b81526004016104b890613409565b61150e348787808060200260200160405190810160405280939291908181526020016000905b828210156109ba576114ff60608302860136819003810190613437565b815260200190600101906114e2565b915086826001845161152091906133b0565b8151811061153057611530613384565b602002602001015110156115565760405162461bcd60e51b81526004016104b8906133c7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db08360008151811061159857611598613384565b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b1580156115cb57600080fd5b505af11580156115df573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb61167d8888600081811061162957611629613384565b61163f92602060609092020190810191506132fd565b8989600081811061165257611652613384565b905060600201602001602081019061166a91906132fd565b8a8a6000818110610aa357610aa3613384565b8460008151811061169057611690613384565b60200260200101516040518363ffffffff1660e01b81526004016116c99291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af11580156116e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170c9190613343565b61171857611718612b1d565b611775828787808060200260200160405190810160405280939291908181526020016000905b8282101561176a5761175b60608302860136819003810190613437565b8152602001906001019061173e565b5050505050866122a4565b5095945050505050565b60606001825110156117a35760405162461bcd60e51b81526004016104b890613409565b81516117b090600161357a565b67ffffffffffffffff8111156117c8576117c8613012565b6040519080825280602002602001820160405280156117f1578160200160208202803683370190505b509050828160008151811061180857611808613384565b60200260200101818152505060005b82518110156119fa57600061187384838151811061183757611837613384565b60200260200101516000015185848151811061185557611855613384565b60200260200101516020015186858151811061087857610878613384565b60405163e5e31b1360e01b81526001600160a01b0380831660048301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063e5e31b1390602401602060405180830381865afa1580156118de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119029190613343565b156119e757806001600160a01b031663f140a35a84848151811061192857611928613384565b602002602001015186858151811061194257611942613384565b6020026020010151600001516040518363ffffffff1660e01b815260040161197d9291909182526001600160a01b0316602082015260400190565b602060405180830381865afa15801561199a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119be91906134b1565b836119ca84600161357a565b815181106119da576119da613384565b6020026020010181815250505b50806119f281613592565b915050611817565b5092915050565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636801cc308a8a8a6040518463ffffffff1660e01b8152600401611a5793929190613470565b602060405180830381865afa158015611a74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a989190613494565b9050600080806001600160a01b03841615611b2257836001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611aeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0f91906134b1565b9050611b1c8c8c8c611368565b90935091505b82158015611b2e575081155b15611b5f578896508795506103e8611b4e611b49888a6134ca565b6128dc565b611b5891906133b0565b9450611bf2565b6000611b6c8a858561294c565b9050888111611bb457899750955085611bad84611b89848b6134ca565b611b9391906134e9565b84611b9e858b6134ca565b611ba891906134e9565b612a16565b9550611bf0565b6000611bc18a858761294c565b9850899750889050611bec85611bd785846134ca565b611be191906134e9565b85611b9e868c6134ca565b9650505b505b50505050955095509592505050565b6000806000611c118f8f8f610e4c565b9050600087611c20578c611c24565b6000195b60405163d505accf60e01b81529091506001600160a01b0383169063d505accf90611c5f903390309086908f908e908e908e9060040161350b565b600060405180830381600087803b158015611c7957600080fd5b505af1158015611c8d573d6000803e3d6000fd5b5050505050611ca28f8f8f8f8f8f8f8f610494565b8093508194505050509c509c9a5050505050505050505050565b60008060008342811015611ce25760405162461bcd60e51b81526004016104b89061331a565b611d118b7f00000000000000000000000000000000000000000000000000000000000000008c8c348d8d61265e565b90945092506000611d438c7f00000000000000000000000000000000000000000000000000000000000000008d610e4c565b9050611d518c3383886121ac565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b158015611dac57600080fd5b505af1158015611dc0573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038581166004830152602482018990527f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb925060440190506020604051808303816000875af1158015611e35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e599190613343565b611e6557611e65612b1d565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a627842906024016020604051808303816000875af1158015611ead573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed191906134b1565b925083341115611eee57611eee33611ee986346133b0565b612590565b50509750975097945050505050565b6000808242811015611f215760405162461bcd60e51b81526004016104b89061331a565b611f518a7f00000000000000000000000000000000000000000000000000000000000000008b8b8b8b308b610494565b9093509150611f618a8685612a2e565b604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015611fc357600080fd5b505af1158015611fd7573d6000803e3d6000fd5b50505050611fe58583612590565b5097509795505050505050565b60405163e5e31b1360e01b81526001600160a01b0382811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e5e31b1390602401602060405180830381865afa15801561205d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120819190613343565b92915050565b606081428110156120aa5760405162461bcd60e51b81526004016104b89061331a565b6120fc888787808060200260200160405190810160405280939291908181526020016000905b828210156109ba576120ed60608302860136819003810190613437565b815260200190600101906120d0565b915086826001845161210e91906133b0565b8151811061211e5761211e613384565b602002602001015110156121445760405162461bcd60e51b81526004016104b8906133c7565b61215a86866000818110610a2257610a22613384565b610c01828787808060200260200160405190810160405280939291908181526020016000905b8282101561176a5761219d60608302860136819003810190613437565b81526020019060010190612180565b6000846001600160a01b03163b116121c357600080fd5b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161222791906135db565b6000604051808303816000865af19150503d8060008114612264576040519150601f19603f3d011682016040523d82523d6000602084013e612269565b606091505b50915091508180156122935750805115806122935750808060200190518101906122939190613343565b61229c57600080fd5b505050505050565b60005b82518110156124f35760006122f68483815181106122c7576122c7613384565b6020026020010151600001518584815181106122e5576122e5613384565b602002602001015160200151610f54565b50905060008561230784600161357a565b8151811061231757612317613384565b60200260200101519050600080836001600160a01b031687868151811061234057612340613384565b6020026020010151600001516001600160a01b03161461236257826000612366565b6000835b9150915060006001885161237a91906133b0565b861061238657866123f9565b6123f98861239588600161357a565b815181106123a5576123a5613384565b602002602001015160000151898860016123bf919061357a565b815181106123cf576123cf613384565b6020026020010151602001518a8960016123e9919061357a565b8151811061087857610878613384565b905061244c88878151811061241057612410613384565b60200260200101516000015189888151811061242e5761242e613384565b6020026020010151602001518a898151811061087857610878613384565b6001600160a01b031663022c0d9f84848460006040519080825280601f01601f191660200182016040528015612489576020820181803683370190505b506040518563ffffffff1660e01b81526004016124a994939291906135f7565b600060405180830381600087803b1580156124c357600080fd5b505af11580156124d7573d6000803e3d6000fd5b50505050505050505080806124eb90613592565b9150506122a7565b50806001600160a01b0316336001600160a01b03167fff3715fa8f2d4d791dd7a610a545050b8c6fe3a62b0f6c38f2f96a00598fe4838560008151811061253c5761253c613384565b60200260200101518560008151811061255757612557613384565b6020026020010151600001516040516125839291909182526001600160a01b0316602082015260400190565b60405180910390a3505050565b604080516000808252602082019092526001600160a01b0384169083906040516125ba91906135db565b60006040518083038185875af1925050503d80600081146125f7576040519150601f19603f3d011682016040523d82523d6000602084013e6125fc565b606091505b50509050806126595760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201526213115160ea1b60648201526084016104b8565b505050565b6000808386101561266e57600080fd5b8285101561267b57600080fd5b6040516306801cc360e41b81526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636801cc30906126ce908d908d908d90600401613470565b602060405180830381865afa1580156126eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061270f9190613494565b90506001600160a01b0381166127b5576040516320b7f73960e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906382dfdce49061276f908d908d908d90600401613470565b6020604051808303816000875af115801561278e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b29190613494565b90505b6000806127c38c8c8c611368565b915091508160001480156127d5575080155b156127e5578894508793506128cd565b60006127f28a848461294c565b9050888111612856578681101561284b5760405162461bcd60e51b815260206004820152601d60248201527f526f757465723a20494e53554646494349454e545f425f414d4f554e5400000060448201526064016104b8565b8995509350836128cb565b60006128638a848661294c565b90508a81111561287557612875612b1d565b888110156128c55760405162461bcd60e51b815260206004820152601d60248201527f526f757465723a20494e53554646494349454e545f415f414d4f554e5400000060448201526064016104b8565b95508894505b505b50505097509795505050505050565b6000600382111561293d57508060006128f66002836134e9565b61290190600161357a565b90505b818110156129375790508060028161291c81866134e9565b612926919061357a565b61293091906134e9565b9050612904565b50919050565b8115612947575060015b919050565b600080841161299d5760405162461bcd60e51b815260206004820152601b60248201527f526f757465723a20494e53554646494349454e545f414d4f554e54000000000060448201526064016104b8565b6000831180156129ad5750600082115b6129f95760405162461bcd60e51b815260206004820152601e60248201527f526f757465723a20494e53554646494349454e545f4c4951554944495459000060448201526064016104b8565b82612a0483866134ca565b612a0e91906134e9565b949350505050565b6000818310612a255781612a27565b825b9392505050565b6000836001600160a01b03163b11612a4557600080fd5b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691612aa191906135db565b6000604051808303816000865af19150503d8060008114612ade576040519150601f19603f3d011682016040523d82523d6000602084013e612ae3565b606091505b5091509150818015612b0d575080511580612b0d575080806020019051810190612b0d9190613343565b612b1657600080fd5b5050505050565b634e487b7160e01b600052600160045260246000fd5b6001600160a01b0381168114612b4857600080fd5b50565b8015158114612b4857600080fd5b600080600080600080600080610100898b031215612b7657600080fd5b8835612b8181612b33565b97506020890135612b9181612b33565b96506040890135612ba181612b4b565b9550606089013594506080890135935060a0890135925060c0890135612bc681612b33565b8092505060e089013590509295985092959890939650565b600080600080600080600060e0888a031215612bf957600080fd5b87359650602088013595506040880135612c1281612b33565b94506060880135612c2281612b33565b93506080880135612c3281612b4b565b925060a0880135612c4281612b33565b8092505060c0880135905092959891949750929550565b6020808252825182820181905260009190848201906040850190845b81811015612c9157835183529284019291840191600101612c75565b50909695505050505050565b60008083601f840112612caf57600080fd5b50813567ffffffffffffffff811115612cc757600080fd5b60208301915083602060608302850101111561102d57600080fd5b60008060008060008060a08789031215612cfb57600080fd5b8635955060208701359450604087013567ffffffffffffffff811115612d2057600080fd5b612d2c89828a01612c9d565b9095509350506060870135612d4081612b33565b80925050608087013590509295509295509295565b60008060008060808587031215612d6b57600080fd5b8435612d7681612b33565b93506020850135612d8681612b33565b92506040850135612d9681612b4b565b9396929550929360600135925050565b803560ff8116811461294757600080fd5b60008060008060008060008060008060006101608c8e031215612dd957600080fd5b8b35612de481612b33565b9a5060208c0135612df481612b4b565b995060408c0135985060608c0135975060808c0135965060a08c0135612e1981612b33565b955060c08c0135945060e08c0135612e3081612b4b565b9350612e3f6101008d01612da6565b92506101208c013591506101408c013590509295989b509295989b9093969950565b600080600060608486031215612e7657600080fd5b8335612e8181612b33565b92506020840135612e9181612b33565b91506040840135612ea181612b4b565b809150509250925092565b60008060408385031215612ebf57600080fd5b8235612eca81612b33565b91506020830135612eda81612b33565b809150509250929050565b60008060008060008060008060006101208a8c031215612f0457600080fd5b8935612f0f81612b33565b985060208a0135612f1f81612b33565b975060408a0135612f2f81612b4b565b965060608a0135955060808a0135945060a08a0135935060c08a0135925060e08a0135612f5b81612b33565b809250506101008a013590509295985092959850929598565b600080600060608486031215612f8957600080fd5b833592506020840135612f9b81612b33565b91506040840135612ea181612b33565b600080600080600060808688031215612fc357600080fd5b85359450602086013567ffffffffffffffff811115612fe157600080fd5b612fed88828901612c9d565b909550935050604086013561300181612b33565b949793965091946060013592915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561305157613051613012565b604052919050565b60006060828403121561306b57600080fd5b6040516060810181811067ffffffffffffffff8211171561308e5761308e613012565b604052905080823561309f81612b33565b815260208301356130af81612b33565b602082015260408301356130c281612b4b565b6040919091015292915050565b600080604083850312156130e257600080fd5b8235915060208084013567ffffffffffffffff8082111561310257600080fd5b818601915086601f83011261311657600080fd5b81358181111561312857613128613012565b613136848260051b01613028565b8181528481019250606091820284018501918983111561315557600080fd5b938501935b8285101561317b5761316c8a86613059565b8452938401939285019261315a565b5080955050505050509250929050565b600080600080600060a086880312156131a357600080fd5b85356131ae81612b33565b945060208601356131be81612b33565b935060408601356131ce81612b4b565b94979396509394606081013594506080013592915050565b6000806000806000806000806000806000806101808d8f03121561320957600080fd5b8c3561321481612b33565b9b5060208d013561322481612b33565b9a5060408d013561323481612b4b565b995060608d0135985060808d0135975060a08d0135965060c08d013561325981612b33565b955060e08d013594506101008d013561327181612b4b565b93506132806101208e01612da6565b92506101408d013591506101608d013590509295989b509295989b509295989b565b600080600080600080600060e0888a0312156132bd57600080fd5b87356132c881612b33565b965060208801356132d881612b4b565b955060408801359450606088013593506080880135925060a0880135612c4281612b33565b60006020828403121561330f57600080fd5b8135612a2781612b33565b6020808252600f908201526e149bdd5d195c8e8811561412549151608a1b604082015260600190565b60006020828403121561335557600080fd5b8151612a2781612b4b565b6000806040838503121561337357600080fd5b505080516020909101519092909150565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156133c2576133c261339a565b500390565b60208082526022908201527f526f757465723a20494e53554646494349454e545f4f55545055545f414d4f55604082015261139560f21b606082015260800190565b6020808252601490820152730a4deeae8cae47440929cac82989288bea082a8960631b604082015260600190565b60006060828403121561344957600080fd5b612a278383613059565b60006020828403121561346557600080fd5b8135612a2781612b4b565b6001600160a01b039384168152919092166020820152901515604082015260600190565b6000602082840312156134a657600080fd5b8151612a2781612b33565b6000602082840312156134c357600080fd5b5051919050565b60008160001904831182151516156134e4576134e461339a565b500290565b60008261350657634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b60008060006060848603121561356157600080fd5b8351925060208401519150604084015190509250925092565b6000821982111561358d5761358d61339a565b500190565b6000600182016135a4576135a461339a565b5060010190565b60005b838110156135c65781810151838201526020016135ae565b838111156135d5576000848401525b50505050565b600082516135ed8184602087016135ab565b9190910192915050565b84815283602082015260018060a01b038316604082015260806060820152600082518060808401526136308160a08501602087016135ab565b601f01601f19169190910160a0019594505050505056fea2646970667358221220d034f130e00a4585cd5bda91fe34ae14f0fade09a8546bc88fdccd969917ec5464736f6c634300080d0033","abi":[{"inputs":[{"internalType":"address","name":"_factory","type":"address"},{"internalType":"address","name":"_weth","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount0In","type":"uint256"},{"indexed":false,"internalType":"address","name":"_tokenIn","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"Swap","type":"event"},{"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"},{"internalType":"bool","name":"stable","type":"bool"},{"internalType":"uint256","name":"amountADesired","type":"uint256"},{"internalType":"uint256","name":"amountBDesired","type":"uint256"},{"internalType":"uint256","name":"amountAMin","type":"uint256"},{"internalType":"uint256","name":"amountBMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"addLiquidity","outputs":[{"internalType":"uint256","name":"amountA","type":"uint256"},{"internalType":"uint256","name":"amountB","type":"uint256"},{"internalType":"uint256","name":"liquidity","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"bool","name":"stable","type":"bool"},{"internalType":"uint256","name":"amountTokenDesired","type":"uint256"},{"internalType":"uint256","name":"amountTokenMin","type":"uint256"},{"internalType":"uint256","name":"amountETHMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"addLiquidityETH","outputs":[{"internalType":"uint256","name":"amountToken","type":"uint256"},{"internalType":"uint256","name":"amountETH","type":"uint256"},{"internalType":"uint256","name":"liquidity","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"}],"name":"getAmountOut","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bool","name":"stable","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"components":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"bool","name":"stable","type":"bool"}],"internalType":"struct Router.route[]","name":"routes","type":"tuple[]"}],"name":"getAmountsOut","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"},{"internalType":"bool","name":"stable","type":"bool"}],"name":"getReserves","outputs":[{"internalType":"uint256","name":"reserveA","type":"uint256"},{"internalType":"uint256","name":"reserveB","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pair","type":"address"}],"name":"isPair","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"},{"internalType":"bool","name":"stable","type":"bool"}],"name":"pairFor","outputs":[{"internalType":"address","name":"pair","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"},{"internalType":"bool","name":"stable","type":"bool"},{"internalType":"uint256","name":"amountADesired","type":"uint256"},{"internalType":"uint256","name":"amountBDesired","type":"uint256"}],"name":"quoteAddLiquidity","outputs":[{"internalType":"uint256","name":"amountA","type":"uint256"},{"internalType":"uint256","name":"amountB","type":"uint256"},{"internalType":"uint256","name":"liquidity","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"},{"internalType":"bool","name":"stable","type":"bool"},{"internalType":"uint256","name":"liquidity","type":"uint256"}],"name":"quoteRemoveLiquidity","outputs":[{"internalType":"uint256","name":"amountA","type":"uint256"},{"internalType":"uint256","name":"amountB","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"},{"internalType":"bool","name":"stable","type":"bool"},{"internalType":"uint256","name":"liquidity","type":"uint256"},{"internalType":"uint256","name":"amountAMin","type":"uint256"},{"internalType":"uint256","name":"amountBMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"removeLiquidity","outputs":[{"internalType":"uint256","name":"amountA","type":"uint256"},{"internalType":"uint256","name":"amountB","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"bool","name":"stable","type":"bool"},{"internalType":"uint256","name":"liquidity","type":"uint256"},{"internalType":"uint256","name":"amountTokenMin","type":"uint256"},{"internalType":"uint256","name":"amountETHMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"removeLiquidityETH","outputs":[{"internalType":"uint256","name":"amountToken","type":"uint256"},{"internalType":"uint256","name":"amountETH","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"bool","name":"stable","type":"bool"},{"internalType":"uint256","name":"liquidity","type":"uint256"},{"internalType":"uint256","name":"amountTokenMin","type":"uint256"},{"internalType":"uint256","name":"amountETHMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"bool","name":"approveMax","type":"bool"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"removeLiquidityETHWithPermit","outputs":[{"internalType":"uint256","name":"amountToken","type":"uint256"},{"internalType":"uint256","name":"amountETH","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"},{"internalType":"bool","name":"stable","type":"bool"},{"internalType":"uint256","name":"liquidity","type":"uint256"},{"internalType":"uint256","name":"amountAMin","type":"uint256"},{"internalType":"uint256","name":"amountBMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"bool","name":"approveMax","type":"bool"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"removeLiquidityWithPermit","outputs":[{"internalType":"uint256","name":"amountA","type":"uint256"},{"internalType":"uint256","name":"amountB","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"}],"name":"sortTokens","outputs":[{"internalType":"address","name":"token0","type":"address"},{"internalType":"address","name":"token1","type":"address"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"components":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"bool","name":"stable","type":"bool"}],"internalType":"struct Router.route[]","name":"routes","type":"tuple[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactETHForTokens","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"components":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"bool","name":"stable","type":"bool"}],"internalType":"struct Router.route[]","name":"routes","type":"tuple[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactTokensForETH","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"components":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"bool","name":"stable","type":"bool"}],"internalType":"struct Router.route[]","name":"routes","type":"tuple[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactTokensForTokens","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address","name":"tokenFrom","type":"address"},{"internalType":"address","name":"tokenTo","type":"address"},{"internalType":"bool","name":"stable","type":"bool"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactTokensForTokensSimple","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"weth","outputs":[{"internalType":"contract IWETH","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}]}