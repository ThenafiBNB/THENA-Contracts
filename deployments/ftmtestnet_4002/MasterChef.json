{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.13\"},\"sources\":{\"contracts/MasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./libraries/SignedSafeMath.sol\\\";\\n\\ncontract MasterChef is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SignedSafeMath for int256;\\n\\n    struct UserInfo {\\n        uint256 amount;\\n        int256 rewardDebt;\\n        uint256[] tokenIds;\\n        mapping(uint256 => uint256) tokenIndices;\\n    }\\n\\n    struct PoolInfo {\\n        uint256 accRewardPerShare;\\n        uint256 lastRewardTime;\\n    }\\n\\n    /// @notice Address of WBNB contract.\\n    IERC20 public WBNB;\\n    /// @notice Address of the NFT token for each MCV2 pool.\\n    IERC721 public NFT;\\n\\n    /// @notice Info of each MCV2 pool.\\n    PoolInfo public poolInfo;\\n\\n    /// @notice Mapping from token ID to owner address\\n    mapping(uint256 => address) public tokenOwner;\\n\\n    /// @notice Info of each user that stakes nft tokens.\\n    mapping(address => UserInfo) public userInfo;\\n\\n    /// @notice Keeper register. Return true if 'address' is a keeper.\\n    mapping(address => bool) public isKeeper;\\n\\n    uint256 public rewardPerSecond;\\n    uint256 private ACC_WBNB_PRECISION;\\n\\n    uint256 public distributePeriod;\\n    uint256 public lastDistributedTime;\\n\\n    event Deposit(address indexed user, uint256 amount, address indexed to);\\n    event Withdraw(address indexed user, uint256 amount, address indexed to);\\n    event Harvest(address indexed user, uint256 amount);\\n    event LogUpdatePool(\\n        uint256 lastRewardTime,\\n        uint256 nftSupply,\\n        uint256 accRewardPerShare\\n    );\\n    event LogRewardPerSecond(uint256 rewardPerSecond);\\n\\n\\n    modifier onlyKeeper {\\n        require(msg.sender == owner() || isKeeper[msg.sender],'not keeper'); \\n        _;\\n    }\\n\\n    constructor(IERC20 _WBNB, IERC721 _NFT) {\\n        WBNB = _WBNB;\\n        NFT = _NFT;\\n        distributePeriod = 1 weeks;\\n        ACC_WBNB_PRECISION = 1e12;\\n        poolInfo = PoolInfo({\\n            lastRewardTime: block.timestamp,\\n            accRewardPerShare: 0\\n        });\\n    }\\n\\n    /// @notice add keepers\\n    function addKeeper(address[] memory _keepers) external onlyOwner {\\n        uint256 i = 0;\\n        uint256 len = _keepers.length;\\n\\n        for(i; i < len; i++){\\n            address _keeper = _keepers[i];\\n            if(!isKeeper[_keeper]){\\n                isKeeper[_keeper] = true;\\n            }\\n        }\\n    }\\n\\n    /// @notice remove keepers\\n    function removeKeeper(address[] memory _keepers) external onlyOwner {\\n        uint256 i = 0;\\n        uint256 len = _keepers.length;\\n\\n        for(i; i < len; i++){\\n            address _keeper = _keepers[i];\\n            if(isKeeper[_keeper]){\\n                isKeeper[_keeper] = false;\\n            }\\n        }\\n    }  \\n\\n\\n    /// @notice Sets the reward per second to be distributed. Can only be called by the owner.\\n    /// @param _rewardPerSecond The amount of Reward to be distributed per second.\\n    function setRewardPerSecond(uint256 _rewardPerSecond) public onlyOwner {\\n        updatePool();\\n        rewardPerSecond = _rewardPerSecond;\\n        emit LogRewardPerSecond(_rewardPerSecond);\\n    }\\n\\n    function setDistributionRate(uint256 amount) public onlyKeeper {\\n        updatePool();\\n        uint256 notDistributed;\\n        if (lastDistributedTime > 0 && block.timestamp < lastDistributedTime) {\\n            uint256 timeLeft = lastDistributedTime.sub(block.timestamp);\\n            notDistributed = rewardPerSecond.mul(timeLeft);\\n        }\\n\\n        amount = amount.add(notDistributed);\\n        uint256 _rewardPerSecond = amount.div(distributePeriod);\\n        rewardPerSecond = _rewardPerSecond;\\n        lastDistributedTime = block.timestamp.add(distributePeriod);\\n        emit LogRewardPerSecond(_rewardPerSecond);\\n    }\\n\\n    /// @notice View function to see pending WBNB on frontend.\\n    /// @param _user Address of user.\\n    /// @return pending WBNB reward for a given user.\\n    function pendingReward(address _user)\\n        external\\n        view\\n        returns (uint256 pending)\\n    {\\n        PoolInfo memory pool = poolInfo;\\n        UserInfo storage user = userInfo[_user];\\n        uint256 accRewardPerShare = pool.accRewardPerShare;\\n        uint256 nftSupply = NFT.balanceOf(address(this));\\n        if (block.timestamp > pool.lastRewardTime && nftSupply != 0) {\\n            uint256 time = block.timestamp.sub(pool.lastRewardTime);\\n            uint256 reward = time.mul(rewardPerSecond);\\n            accRewardPerShare = accRewardPerShare.add(\\n                reward.mul(ACC_WBNB_PRECISION) / nftSupply\\n            );\\n        }\\n        pending = int256(\\n            user.amount.mul(accRewardPerShare) / ACC_WBNB_PRECISION\\n        ).sub(user.rewardDebt).toUInt256();\\n    }\\n\\n    /// @notice View function to see token Ids on frontend.\\n    /// @param _user Address of user.\\n    /// @return tokenIds Staked Token Ids for a given user.\\n    function stakedTokenIds(address _user)\\n        external\\n        view\\n        returns (uint256[] memory tokenIds)\\n    {\\n        tokenIds = userInfo[_user].tokenIds;\\n    }\\n\\n    /// @notice Update reward variables of the given pool.\\n    /// @return pool Returns the pool that was updated.\\n    function updatePool() public returns (PoolInfo memory pool) {\\n        pool = poolInfo;\\n        if (block.timestamp > pool.lastRewardTime) {\\n            uint256 nftSupply = NFT.balanceOf(address(this));\\n            if (nftSupply > 0) {\\n                uint256 time = block.timestamp.sub(pool.lastRewardTime);\\n                uint256 reward = time.mul(rewardPerSecond);\\n                pool.accRewardPerShare = pool.accRewardPerShare.add(\\n                    reward.mul(ACC_WBNB_PRECISION).div(nftSupply)\\n                );\\n            }\\n            pool.lastRewardTime = block.timestamp;\\n            poolInfo = pool;\\n            emit LogUpdatePool(\\n                pool.lastRewardTime,\\n                nftSupply,\\n                pool.accRewardPerShare\\n            );\\n        }\\n    }\\n\\n    /// @notice Deposit nft tokens to MCV2 for WBNB allocation.\\n    /// @param tokenIds NFT tokenIds to deposit.\\n    function deposit(uint256[] calldata tokenIds) public {\\n        PoolInfo memory pool = updatePool();\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        // Effects\\n        user.amount = user.amount.add(tokenIds.length);\\n        user.rewardDebt = user.rewardDebt.add( int256(tokenIds.length.mul(pool.accRewardPerShare) / ACC_WBNB_PRECISION) );\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            require(NFT.ownerOf(tokenIds[i]) == msg.sender, \\\"This NTF does not belong to address\\\");\\n\\n            user.tokenIndices[tokenIds[i]] = user.tokenIds.length;\\n            user.tokenIds.push(tokenIds[i]);\\n            tokenOwner[tokenIds[i]] = msg.sender;\\n\\n            NFT.transferFrom(msg.sender, address(this), tokenIds[i]);\\n        }\\n\\n        emit Deposit(msg.sender, tokenIds.length, msg.sender);\\n    }\\n\\n    /// @notice Withdraw NFT tokens from MCV2.\\n    /// @param tokenIds NFT token ids to withdraw.\\n    function withdraw(uint256[] calldata tokenIds) public {\\n        PoolInfo memory pool = updatePool();\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        // Effects\\n        user.rewardDebt = user.rewardDebt.sub(\\n            int256(\\n                tokenIds.length.mul(pool.accRewardPerShare) / ACC_WBNB_PRECISION\\n            )\\n        );\\n        user.amount = user.amount.sub(tokenIds.length);\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            require(\\n                tokenOwner[tokenIds[i]] == msg.sender,\\n                \\\"Nft Staking System: user must be the owner of the staked nft\\\"\\n            );\\n            NFT.transferFrom(address(this), msg.sender, tokenIds[i]);\\n            uint256 lastTokenId = user.tokenIds[user.tokenIds.length - 1];\\n            user.tokenIds[user.tokenIndices[tokenIds[i]]] = lastTokenId;\\n            user.tokenIndices[lastTokenId] = user.tokenIndices[tokenIds[i]];\\n            user.tokenIds.pop();\\n            delete user.tokenIndices[tokenIds[i]];\\n            delete tokenOwner[tokenIds[i]];\\n        }\\n\\n        emit Withdraw(msg.sender, tokenIds.length, msg.sender);\\n    }\\n\\n    /// @notice Harvest proceeds for transaction sender.\\n    function harvest() public {\\n        PoolInfo memory pool = updatePool();\\n        UserInfo storage user = userInfo[msg.sender];\\n        int256 accumulatedReward = int256(\\n            user.amount.mul(pool.accRewardPerShare) / ACC_WBNB_PRECISION\\n        );\\n        uint256 _pendingReward = accumulatedReward\\n            .sub(user.rewardDebt)\\n            .toUInt256();\\n\\n        // Effects\\n        user.rewardDebt = accumulatedReward;\\n\\n        // Interactions\\n        if (_pendingReward != 0) {\\n            WBNB.safeTransfer(msg.sender, _pendingReward);\\n        }\\n\\n        emit Harvest(msg.sender, _pendingReward);\\n    }\\n\\n    function onERC721Received(address, address, uint256, bytes calldata) external pure returns (bytes4) {\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n}\",\"versionPragma\":\"0.8.13\"},\"contracts/libraries/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function toUInt256(int256 a) internal pure returns (uint256) {\\n        require(a >= 0, \\\"Integer < 0\\\");\\n        return uint256(a);\\n    }\\n}\",\"versionPragma\":\"0.8.13\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.1\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"}}}","address":"0x93318710F720C0100aEd095B7Ce1de8d8BC68bFB","bytecode":"0x60806040523480156200001157600080fd5b5060405162001c0538038062001c05833981016040819052620000349162000108565b6200003f336200009f565b600180546001600160a01b039384166001600160a01b0319918216179091556002805492909316911617905562093a80600a5564e8d4a5100060095560408051808201909152600080825242602090920182905260035560045562000147565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146200010557600080fd5b50565b600080604083850312156200011c57600080fd5b82516200012981620000ef565b60208401519092506200013c81620000ef565b809150509250929050565b611aae80620001576000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c80636fce8234116100c35780638f10369a1161007c5780638f10369a14610315578063983d95ce1461031e5780639e71310314610331578063e3161ddd14610351578063f2fde38b14610374578063f40f0f521461038757600080fd5b80636fce8234146102b0578063715018a6146102c35780637542b4d3146102cb5780637c0b8de2146102de5780638da5cb5b146102f15780638dd950021461030257600080fd5b80634641257d116101155780634641257d146102385780634def1c8214610240578063598b8e71146102495780635a2f3d091461025c57806366da58151461026a5780636ba42aaa1461027d57600080fd5b806314b9302e14610152578063150b7a021461016e5780631959a002146101a657806319983251146101e25780631caaa487146101f7575b600080fd5b61015b600a5481565b6040519081526020015b60405180910390f35b61018d61017c3660046115ed565b630a85bd0160e11b95945050505050565b6040516001600160e01b03199091168152602001610165565b6101cd6101b436600461168c565b6006602052600090815260409020805460019091015482565b60408051928352602083019190915201610165565b6101f56101f03660046116a9565b61039a565b005b6102206102053660046116a9565b6005602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610165565b6101f56104ba565b61015b600b5481565b6101f56102573660046116c2565b610579565b6003546004546101cd919082565b6101f56102783660046116a9565b61085f565b6102a061028b36600461168c565b60076020526000908152604090205460ff1681565b6040519015158152602001610165565b6101f56102be36600461174d565b6108ab565b6101f5610941565b6101f56102d936600461174d565b610955565b600254610220906001600160a01b031681565b6000546001600160a01b0316610220565b600154610220906001600160a01b031681565b61015b60085481565b6101f561032c3660046116c2565b6109e4565b61034461033f36600461168c565b610d34565b6040516101659190611812565b610359610da3565b60408051825181526020928301519281019290925201610165565b6101f561038236600461168c565b610f02565b61015b61039536600461168c565b610f7b565b6000546001600160a01b03163314806103c257503360009081526007602052604090205460ff165b6104005760405162461bcd60e51b815260206004820152600a6024820152693737ba1035b2b2b832b960b11b60448201526064015b60405180910390fd5b610408610da3565b50600080600b5411801561041d5750600b5442105b1561044657600b5460009061043290426110d7565b60085490915061044290826110ea565b9150505b61045082826110f6565b91506000610469600a548461110290919063ffffffff16565b6008819055600a5490915061047f9042906110f6565b600b556040518181527fde89cb17ac7f58f94792b3e91e086ed85403819c24ceea882491f960ccb1a2789060200160405180910390a1505050565b60006104c4610da3565b33600090815260066020526040812060095483518254949550919390916104eb91906110ea565b6104f5919061186c565b9050600061051861051384600101548461110e90919063ffffffff16565b61119b565b600184018390559050801561053e5760015461053e906001600160a01b031633836111df565b60405181815233907fc9695243a805adb74c91f28311176c65b417e842d5699893cef56d18bfa48cba9060200160405180910390a250505050565b6000610583610da3565b3360009081526006602052604090208054919250906105a290846110f6565b815560095482516105ce91906105b99086906110ea565b6105c3919061186c565b600183015490611231565b600182015560005b838110156108205760025433906001600160a01b0316636352211e8787858181106106035761060361188e565b905060200201356040518263ffffffff1660e01b815260040161062891815260200190565b602060405180830381865afa158015610645573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066991906118a4565b6001600160a01b0316146106cb5760405162461bcd60e51b815260206004820152602360248201527f54686973204e544620646f6573206e6f742062656c6f6e6720746f206164647260448201526265737360e81b60648201526084016103f7565b60028201546003830160008787858181106106e8576106e861188e565b90506020020135815260200190815260200160002081905550816002018585838181106107175761071761188e565b8354600181018555600094855260208086209202939093013592019190915550339060059087878581811061074e5761074e61188e565b6020908102929092013583525081019190915260400160002080546001600160a01b0319166001600160a01b03928316179055600254166323b872dd333088888681811061079e5761079e61188e565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b1580156107f557600080fd5b505af1158015610809573d6000803e3d6000fd5b505050508080610818906118c1565b9150506105d6565b50604051838152339081907fe31c7b8d08ee7db0afa68782e1028ef92305caeea8626633ad44d413e30f6b2f906020015b60405180910390a350505050565b6108676112bc565b61086f610da3565b5060088190556040518181527fde89cb17ac7f58f94792b3e91e086ed85403819c24ceea882491f960ccb1a2789060200160405180910390a150565b6108b36112bc565b80516000905b8082101561093c5760008383815181106108d5576108d561188e565b6020908102919091018101516001600160a01b0381166000908152600790925260409091205490915060ff16610929576001600160a01b0381166000908152600760205260409020805460ff191660011790555b5081610934816118c1565b9250506108b9565b505050565b6109496112bc565b6109536000611316565b565b61095d6112bc565b80516000905b8082101561093c57600083838151811061097f5761097f61188e565b6020908102919091018101516001600160a01b0381166000908152600790925260409091205490915060ff16156109d1576001600160a01b0381166000908152600760205260409020805460ff191690555b50816109dc816118c1565b925050610963565b60006109ee610da3565b33600090815260066020526040902060095482519293509091610a2c9190610a179086906110ea565b610a21919061186c565b60018301549061110e565b60018201558054610a3d90846110d7565b815560005b83811015610cff573360056000878785818110610a6157610a6161188e565b60209081029290920135835250810191909152604001600020546001600160a01b031614610af75760405162461bcd60e51b815260206004820152603c60248201527f4e6674205374616b696e672053797374656d3a2075736572206d75737420626560448201527f20746865206f776e6572206f6620746865207374616b6564206e66740000000060648201526084016103f7565b6002546001600160a01b03166323b872dd3033888886818110610b1c57610b1c61188e565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b158015610b7357600080fd5b505af1158015610b87573d6000803e3d6000fd5b50505060028301805460009250610ba0906001906118da565b81548110610bb057610bb061188e565b906000526020600020015490508083600201846003016000898987818110610bda57610bda61188e565b9050602002013581526020019081526020016000205481548110610c0057610c0061188e565b9060005260206000200181905550826003016000878785818110610c2657610c2661188e565b905060200201358152602001908152602001600020548360030160008381526020019081526020016000208190555082600201805480610c6857610c686118f1565b60019003818190600052602060002001600090559055826003016000878785818110610c9657610c9661188e565b9050602002013581526020019081526020016000206000905560056000878785818110610cc557610cc561188e565b6020908102929092013583525081019190915260400160002080546001600160a01b03191690555080610cf7816118c1565b915050610a42565b50604051838152339081907f56c54ba9bd38d8fd62012e42c7ee564519b09763c426d331b3661b537ead19b290602001610851565b6001600160a01b038116600090815260066020908152604091829020600201805483518184028101840190945280845260609392830182828015610d9757602002820191906000526020600020905b815481526020019060010190808311610d83575b50505050509050919050565b604080518082018252600080825260209182015281518083019092526003548252600454908201819052421115610eff576002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e419190611907565b90508015610eac576000610e628360200151426110d790919063ffffffff16565b90506000610e7b600854836110ea90919063ffffffff16565b9050610ea7610e9f84610e99600954856110ea90919063ffffffff16565b90611102565b8551906110f6565b845250505b4260208381018290528351600381905560048390556040805193845291830184905282820152517f1f2d1a9fde053af46b5db3dc92a8aa8696e56a677998fdd1311b45be341f78539181900360600190a1505b90565b610f0a6112bc565b6001600160a01b038116610f6f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103f7565b610f7881611316565b50565b6040805180820182526003548152600480546020808401919091526001600160a01b0385811660009081526006909252848220845160025496516370a0823160e01b8152309581019590955292959093869291909116906370a0823190602401602060405180830381865afa158015610ff8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101c9190611907565b905083602001514211801561103057508015155b1561109857600061104e8560200151426110d790919063ffffffff16565b90506000611067600854836110ea90919063ffffffff16565b905061109383611082600954846110ea90919063ffffffff16565b61108c919061186c565b85906110f6565b935050505b6110cd61051384600101546009546110bd8688600001546110ea90919063ffffffff16565b6110c7919061186c565b9061110e565b9695505050505050565b60006110e382846118da565b9392505050565b60006110e38284611920565b60006110e3828461193f565b60006110e3828461186c565b60008061111b8385611957565b90506000831215801561112e5750838113155b80611143575060008312801561114357508381135b6110e35760405162461bcd60e51b8152602060048201526024808201527f5369676e6564536166654d6174683a207375627472616374696f6e206f766572604482015263666c6f7760e01b60648201526084016103f7565b6000808212156111db5760405162461bcd60e51b815260206004820152600b60248201526a0496e7465676572203c20360ac1b60448201526064016103f7565b5090565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261093c908490611366565b60008061123e8385611996565b9050600083121580156112515750838112155b80611266575060008312801561126657508381125b6110e35760405162461bcd60e51b815260206004820152602160248201527f5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f6044820152607760f81b60648201526084016103f7565b6000546001600160a01b031633146109535760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f7565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006113bb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166114389092919063ffffffff16565b80519091501561093c57808060200190518101906113d991906119d7565b61093c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103f7565b6060611447848460008561144f565b949350505050565b6060824710156114b05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103f7565b600080866001600160a01b031685876040516114cc9190611a29565b60006040518083038185875af1925050503d8060008114611509576040519150601f19603f3d011682016040523d82523d6000602084013e61150e565b606091505b509150915061151f8783838761152a565b979650505050505050565b60608315611599578251600003611592576001600160a01b0385163b6115925760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103f7565b5081611447565b61144783838151156115ae5781518083602001fd5b8060405162461bcd60e51b81526004016103f79190611a45565b6001600160a01b0381168114610f7857600080fd5b80356115e8816115c8565b919050565b60008060008060006080868803121561160557600080fd5b8535611610816115c8565b94506020860135611620816115c8565b935060408601359250606086013567ffffffffffffffff8082111561164457600080fd5b818801915088601f83011261165857600080fd5b81358181111561166757600080fd5b89602082850101111561167957600080fd5b9699959850939650602001949392505050565b60006020828403121561169e57600080fd5b81356110e3816115c8565b6000602082840312156116bb57600080fd5b5035919050565b600080602083850312156116d557600080fd5b823567ffffffffffffffff808211156116ed57600080fd5b818501915085601f83011261170157600080fd5b81358181111561171057600080fd5b8660208260051b850101111561172557600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561176057600080fd5b823567ffffffffffffffff8082111561177857600080fd5b818501915085601f83011261178c57600080fd5b81358181111561179e5761179e611737565b8060051b604051601f19603f830116810181811085821117156117c3576117c3611737565b6040529182528482019250838101850191888311156117e157600080fd5b938501935b82851015611806576117f7856115dd565b845293850193928501926117e6565b98975050505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561184a5783518352928401929184019160010161182e565b50909695505050505050565b634e487b7160e01b600052601160045260246000fd5b60008261188957634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156118b657600080fd5b81516110e3816115c8565b6000600182016118d3576118d3611856565b5060010190565b6000828210156118ec576118ec611856565b500390565b634e487b7160e01b600052603160045260246000fd5b60006020828403121561191957600080fd5b5051919050565b600081600019048311821515161561193a5761193a611856565b500290565b6000821982111561195257611952611856565b500190565b60008083128015600160ff1b85018412161561197557611975611856565b6001600160ff1b038401831381161561199057611990611856565b50500390565b600080821280156001600160ff1b03849003851316156119b8576119b8611856565b600160ff1b83900384128116156119d1576119d1611856565b50500190565b6000602082840312156119e957600080fd5b815180151581146110e357600080fd5b60005b83811015611a145781810151838201526020016119fc565b83811115611a23576000848401525b50505050565b60008251611a3b8184602087016119f9565b9190910192915050565b6020815260008251806020840152611a648160408501602087016119f9565b601f01601f1916919091016040019291505056fea26469706673582212207b86f179b42d43b29e25967df515bae2a4c2b4a9f8d5865d7ddb0ea4a13d63da64736f6c634300080d0033","deployedBytecode":"0x608060405234801561001057600080fd5b506004361061014d5760003560e01c80636fce8234116100c35780638f10369a1161007c5780638f10369a14610315578063983d95ce1461031e5780639e71310314610331578063e3161ddd14610351578063f2fde38b14610374578063f40f0f521461038757600080fd5b80636fce8234146102b0578063715018a6146102c35780637542b4d3146102cb5780637c0b8de2146102de5780638da5cb5b146102f15780638dd950021461030257600080fd5b80634641257d116101155780634641257d146102385780634def1c8214610240578063598b8e71146102495780635a2f3d091461025c57806366da58151461026a5780636ba42aaa1461027d57600080fd5b806314b9302e14610152578063150b7a021461016e5780631959a002146101a657806319983251146101e25780631caaa487146101f7575b600080fd5b61015b600a5481565b6040519081526020015b60405180910390f35b61018d61017c3660046115ed565b630a85bd0160e11b95945050505050565b6040516001600160e01b03199091168152602001610165565b6101cd6101b436600461168c565b6006602052600090815260409020805460019091015482565b60408051928352602083019190915201610165565b6101f56101f03660046116a9565b61039a565b005b6102206102053660046116a9565b6005602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610165565b6101f56104ba565b61015b600b5481565b6101f56102573660046116c2565b610579565b6003546004546101cd919082565b6101f56102783660046116a9565b61085f565b6102a061028b36600461168c565b60076020526000908152604090205460ff1681565b6040519015158152602001610165565b6101f56102be36600461174d565b6108ab565b6101f5610941565b6101f56102d936600461174d565b610955565b600254610220906001600160a01b031681565b6000546001600160a01b0316610220565b600154610220906001600160a01b031681565b61015b60085481565b6101f561032c3660046116c2565b6109e4565b61034461033f36600461168c565b610d34565b6040516101659190611812565b610359610da3565b60408051825181526020928301519281019290925201610165565b6101f561038236600461168c565b610f02565b61015b61039536600461168c565b610f7b565b6000546001600160a01b03163314806103c257503360009081526007602052604090205460ff165b6104005760405162461bcd60e51b815260206004820152600a6024820152693737ba1035b2b2b832b960b11b60448201526064015b60405180910390fd5b610408610da3565b50600080600b5411801561041d5750600b5442105b1561044657600b5460009061043290426110d7565b60085490915061044290826110ea565b9150505b61045082826110f6565b91506000610469600a548461110290919063ffffffff16565b6008819055600a5490915061047f9042906110f6565b600b556040518181527fde89cb17ac7f58f94792b3e91e086ed85403819c24ceea882491f960ccb1a2789060200160405180910390a1505050565b60006104c4610da3565b33600090815260066020526040812060095483518254949550919390916104eb91906110ea565b6104f5919061186c565b9050600061051861051384600101548461110e90919063ffffffff16565b61119b565b600184018390559050801561053e5760015461053e906001600160a01b031633836111df565b60405181815233907fc9695243a805adb74c91f28311176c65b417e842d5699893cef56d18bfa48cba9060200160405180910390a250505050565b6000610583610da3565b3360009081526006602052604090208054919250906105a290846110f6565b815560095482516105ce91906105b99086906110ea565b6105c3919061186c565b600183015490611231565b600182015560005b838110156108205760025433906001600160a01b0316636352211e8787858181106106035761060361188e565b905060200201356040518263ffffffff1660e01b815260040161062891815260200190565b602060405180830381865afa158015610645573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066991906118a4565b6001600160a01b0316146106cb5760405162461bcd60e51b815260206004820152602360248201527f54686973204e544620646f6573206e6f742062656c6f6e6720746f206164647260448201526265737360e81b60648201526084016103f7565b60028201546003830160008787858181106106e8576106e861188e565b90506020020135815260200190815260200160002081905550816002018585838181106107175761071761188e565b8354600181018555600094855260208086209202939093013592019190915550339060059087878581811061074e5761074e61188e565b6020908102929092013583525081019190915260400160002080546001600160a01b0319166001600160a01b03928316179055600254166323b872dd333088888681811061079e5761079e61188e565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b1580156107f557600080fd5b505af1158015610809573d6000803e3d6000fd5b505050508080610818906118c1565b9150506105d6565b50604051838152339081907fe31c7b8d08ee7db0afa68782e1028ef92305caeea8626633ad44d413e30f6b2f906020015b60405180910390a350505050565b6108676112bc565b61086f610da3565b5060088190556040518181527fde89cb17ac7f58f94792b3e91e086ed85403819c24ceea882491f960ccb1a2789060200160405180910390a150565b6108b36112bc565b80516000905b8082101561093c5760008383815181106108d5576108d561188e565b6020908102919091018101516001600160a01b0381166000908152600790925260409091205490915060ff16610929576001600160a01b0381166000908152600760205260409020805460ff191660011790555b5081610934816118c1565b9250506108b9565b505050565b6109496112bc565b6109536000611316565b565b61095d6112bc565b80516000905b8082101561093c57600083838151811061097f5761097f61188e565b6020908102919091018101516001600160a01b0381166000908152600790925260409091205490915060ff16156109d1576001600160a01b0381166000908152600760205260409020805460ff191690555b50816109dc816118c1565b925050610963565b60006109ee610da3565b33600090815260066020526040902060095482519293509091610a2c9190610a179086906110ea565b610a21919061186c565b60018301549061110e565b60018201558054610a3d90846110d7565b815560005b83811015610cff573360056000878785818110610a6157610a6161188e565b60209081029290920135835250810191909152604001600020546001600160a01b031614610af75760405162461bcd60e51b815260206004820152603c60248201527f4e6674205374616b696e672053797374656d3a2075736572206d75737420626560448201527f20746865206f776e6572206f6620746865207374616b6564206e66740000000060648201526084016103f7565b6002546001600160a01b03166323b872dd3033888886818110610b1c57610b1c61188e565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b158015610b7357600080fd5b505af1158015610b87573d6000803e3d6000fd5b50505060028301805460009250610ba0906001906118da565b81548110610bb057610bb061188e565b906000526020600020015490508083600201846003016000898987818110610bda57610bda61188e565b9050602002013581526020019081526020016000205481548110610c0057610c0061188e565b9060005260206000200181905550826003016000878785818110610c2657610c2661188e565b905060200201358152602001908152602001600020548360030160008381526020019081526020016000208190555082600201805480610c6857610c686118f1565b60019003818190600052602060002001600090559055826003016000878785818110610c9657610c9661188e565b9050602002013581526020019081526020016000206000905560056000878785818110610cc557610cc561188e565b6020908102929092013583525081019190915260400160002080546001600160a01b03191690555080610cf7816118c1565b915050610a42565b50604051838152339081907f56c54ba9bd38d8fd62012e42c7ee564519b09763c426d331b3661b537ead19b290602001610851565b6001600160a01b038116600090815260066020908152604091829020600201805483518184028101840190945280845260609392830182828015610d9757602002820191906000526020600020905b815481526020019060010190808311610d83575b50505050509050919050565b604080518082018252600080825260209182015281518083019092526003548252600454908201819052421115610eff576002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e419190611907565b90508015610eac576000610e628360200151426110d790919063ffffffff16565b90506000610e7b600854836110ea90919063ffffffff16565b9050610ea7610e9f84610e99600954856110ea90919063ffffffff16565b90611102565b8551906110f6565b845250505b4260208381018290528351600381905560048390556040805193845291830184905282820152517f1f2d1a9fde053af46b5db3dc92a8aa8696e56a677998fdd1311b45be341f78539181900360600190a1505b90565b610f0a6112bc565b6001600160a01b038116610f6f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103f7565b610f7881611316565b50565b6040805180820182526003548152600480546020808401919091526001600160a01b0385811660009081526006909252848220845160025496516370a0823160e01b8152309581019590955292959093869291909116906370a0823190602401602060405180830381865afa158015610ff8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101c9190611907565b905083602001514211801561103057508015155b1561109857600061104e8560200151426110d790919063ffffffff16565b90506000611067600854836110ea90919063ffffffff16565b905061109383611082600954846110ea90919063ffffffff16565b61108c919061186c565b85906110f6565b935050505b6110cd61051384600101546009546110bd8688600001546110ea90919063ffffffff16565b6110c7919061186c565b9061110e565b9695505050505050565b60006110e382846118da565b9392505050565b60006110e38284611920565b60006110e3828461193f565b60006110e3828461186c565b60008061111b8385611957565b90506000831215801561112e5750838113155b80611143575060008312801561114357508381135b6110e35760405162461bcd60e51b8152602060048201526024808201527f5369676e6564536166654d6174683a207375627472616374696f6e206f766572604482015263666c6f7760e01b60648201526084016103f7565b6000808212156111db5760405162461bcd60e51b815260206004820152600b60248201526a0496e7465676572203c20360ac1b60448201526064016103f7565b5090565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261093c908490611366565b60008061123e8385611996565b9050600083121580156112515750838112155b80611266575060008312801561126657508381125b6110e35760405162461bcd60e51b815260206004820152602160248201527f5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f6044820152607760f81b60648201526084016103f7565b6000546001600160a01b031633146109535760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f7565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006113bb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166114389092919063ffffffff16565b80519091501561093c57808060200190518101906113d991906119d7565b61093c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103f7565b6060611447848460008561144f565b949350505050565b6060824710156114b05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103f7565b600080866001600160a01b031685876040516114cc9190611a29565b60006040518083038185875af1925050503d8060008114611509576040519150601f19603f3d011682016040523d82523d6000602084013e61150e565b606091505b509150915061151f8783838761152a565b979650505050505050565b60608315611599578251600003611592576001600160a01b0385163b6115925760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103f7565b5081611447565b61144783838151156115ae5781518083602001fd5b8060405162461bcd60e51b81526004016103f79190611a45565b6001600160a01b0381168114610f7857600080fd5b80356115e8816115c8565b919050565b60008060008060006080868803121561160557600080fd5b8535611610816115c8565b94506020860135611620816115c8565b935060408601359250606086013567ffffffffffffffff8082111561164457600080fd5b818801915088601f83011261165857600080fd5b81358181111561166757600080fd5b89602082850101111561167957600080fd5b9699959850939650602001949392505050565b60006020828403121561169e57600080fd5b81356110e3816115c8565b6000602082840312156116bb57600080fd5b5035919050565b600080602083850312156116d557600080fd5b823567ffffffffffffffff808211156116ed57600080fd5b818501915085601f83011261170157600080fd5b81358181111561171057600080fd5b8660208260051b850101111561172557600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561176057600080fd5b823567ffffffffffffffff8082111561177857600080fd5b818501915085601f83011261178c57600080fd5b81358181111561179e5761179e611737565b8060051b604051601f19603f830116810181811085821117156117c3576117c3611737565b6040529182528482019250838101850191888311156117e157600080fd5b938501935b82851015611806576117f7856115dd565b845293850193928501926117e6565b98975050505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561184a5783518352928401929184019160010161182e565b50909695505050505050565b634e487b7160e01b600052601160045260246000fd5b60008261188957634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156118b657600080fd5b81516110e3816115c8565b6000600182016118d3576118d3611856565b5060010190565b6000828210156118ec576118ec611856565b500390565b634e487b7160e01b600052603160045260246000fd5b60006020828403121561191957600080fd5b5051919050565b600081600019048311821515161561193a5761193a611856565b500290565b6000821982111561195257611952611856565b500190565b60008083128015600160ff1b85018412161561197557611975611856565b6001600160ff1b038401831381161561199057611990611856565b50500390565b600080821280156001600160ff1b03849003851316156119b8576119b8611856565b600160ff1b83900384128116156119d1576119d1611856565b50500190565b6000602082840312156119e957600080fd5b815180151581146110e357600080fd5b60005b83811015611a145781810151838201526020016119fc565b83811115611a23576000848401525b50505050565b60008251611a3b8184602087016119f9565b9190910192915050565b6020815260008251806020840152611a648160408501602087016119f9565b601f01601f1916919091016040019291505056fea26469706673582212207b86f179b42d43b29e25967df515bae2a4c2b4a9f8d5865d7ddb0ea4a13d63da64736f6c634300080d0033","abi":[{"inputs":[{"internalType":"contract IERC20","name":"_WBNB","type":"address"},{"internalType":"contract IERC721","name":"_NFT","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Harvest","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"rewardPerSecond","type":"uint256"}],"name":"LogRewardPerSecond","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"lastRewardTime","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"nftSupply","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"accRewardPerShare","type":"uint256"}],"name":"LogUpdatePool","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"Withdraw","type":"event"},{"inputs":[],"name":"NFT","outputs":[{"internalType":"contract IERC721","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"WBNB","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"_keepers","type":"address[]"}],"name":"addKeeper","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"distributePeriod","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"harvest","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"isKeeper","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastDistributedTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"pendingReward","outputs":[{"internalType":"uint256","name":"pending","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"poolInfo","outputs":[{"internalType":"uint256","name":"accRewardPerShare","type":"uint256"},{"internalType":"uint256","name":"lastRewardTime","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"_keepers","type":"address[]"}],"name":"removeKeeper","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rewardPerSecond","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"setDistributionRate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_rewardPerSecond","type":"uint256"}],"name":"setRewardPerSecond","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"stakedTokenIds","outputs":[{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"tokenOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"updatePool","outputs":[{"components":[{"internalType":"uint256","name":"accRewardPerShare","type":"uint256"},{"internalType":"uint256","name":"lastRewardTime","type":"uint256"}],"internalType":"struct MasterChef.PoolInfo","name":"pool","type":"tuple"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"userInfo","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"int256","name":"rewardDebt","type":"int256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}]}